@using SurcosBlazor.Client.Repositorio
@inject IRepositorio repositorio
@typeparam T
@inject IJSRuntime js
@inject IToastService toastService


<ListadoGenerico T="T" listado="listado">
    <HayRegistros>
        <table class="table table-sm d-xs-block" style="overflow-x:auto;">
            <thead>
                <tr class="">
                    @foreach (var encabezado in elementosAmostrar)
                    {
                        <th scope="col">@encabezado[0]</th>
                    }

                    @if (acciones)
                    {
                        <th scope="col">Acciones</th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (T item in listado)
                {
                    <tr>
                        @foreach (var valor in elementosAmostrar)
                        {
                            <td>


                                @if (valor[2] == "Checkbox")
                                {
                                    <input type="checkbox" disabled checked="@GetPropertyValue(item, valor[1])" />
                                    <span>@(@GetPropertyValue(item, valor[1]).ToString() == "True" ? " On" : " Off") </span>
                                }
                                else if (valor[2] == "Imagen")
                                {
                                    <img style="width: 3rem; height:3rem; border-radius:50%;" src="@GetPropertyValue(item, valor[1])" />

                                }

                                else if (valor[2] == "Fecha")
                                {
                                    @($"{@GetPropertyValue(item, valor[1]).ToString()}")

                                }
                                else
                                {
                                    @($"{@GetPropertyValue(item, valor[1])}")
                                }
                            </td>

                        }

                        @if (acciones)
                        {
                            <td>
                                @if (detalle)
                                {
                                    <a class="btn btn-sm p-1" href="@($"{detalleUrl}/{item.GetType().GetProperty("Id").GetValue(item, null)}")"> <i class="far fa-eye"></i></a>
                                }
                                @if (editar)
                                {
                                    <button class="btn btn-sm p-1" title="Editar" @onclick="@(()=>click_boton_editar(item))">
                                        <i class="fas fa-edit text-warning"></i>
                                    </button>
                                }
                                @if (eliminar)
                                {
                                    <button class="btn btn-sm p-1" title="Eliminar" @onclick="@(()=>click_boton_eliminar(item))">
                                        <i class="far fa-trash-alt text-danger"></i>
                                    </button>
                                }

                            </td>

                        }
                    </tr>
                }
            </tbody>
        </table>
        @if (consultaApi.paginacion)
        {
            <PaginacionComp PaginaActual="paginaActual" PaginaSeleccionada="paginaSeleccionada" PaginasTotales="paginasTotales"></PaginacionComp>
        }
    </HayRegistros>
</ListadoGenerico>

@if (editar && listado != null && listado.Count >= 0)
{
    <Modal modalTitulo="Editar" modalId="@modalIdEditar" modalTamaño="@tamañoModal">
        @modalContentEditar
    </Modal>
}
@if (eliminar && listado != null && listado.Count >= 0)
{
    <ModalConfirm modalId="@modalIdEliminar" confirmFunc='(async () => { await eliminarFunc.InvokeAsync(new Object()); await ListarItemsApi(); toastService.ShowInfo("Se elimino correctamente");})'>
        <childContent>
            <p>¿Estas seguro que desear realizar esta eliminación? Una vez hecho no habrá vuelta atrás</p>
        </childContent>
    </ModalConfirm>
}
@code {
    [Parameter] public List<string> encabezados { get; set; }
    [Parameter] public EventCallback<T> selectTitem { get; set; }

    public List<T> listado { get; set; }

    [Parameter] public List<string[]> elementosAmostrar { get; set; }

    [Parameter] public ConsultarApi consultaApi { get; set; } = new ConsultarApi();

    [Parameter] public bool acciones { get; set; } = false;

    [Parameter] public bool detalle { get; set; } = false;
    [Parameter] public string detalleUrl { get; set; } = "/";

    [Parameter] public bool editar { get; set; } = false;
    [Parameter] public bool eliminar { get; set; } = false;
    [Parameter] public string tamañoModal { get; set; } = "modal-md";

    [Parameter] public EventCallback eliminarFunc { get; set; }

    [Parameter] public RenderFragment modalContentEditar { get; set; }
    [Parameter] public string modalIdEditar { get; set; } = "modalEditarTablaGenerica";
    [Parameter] public string modalIdEliminar { get; set; } = "modalEliminarTablaGenerica";
    public T item { get; set; }
    private int paginaActual = 1;
    private int paginasTotales;
    private HttpResponseWrapper<List<T>> responseHttp;

    public class ConsultarApi
    {
        public bool consultaApi { get; set; }
        public string baseUrl { get; set; }
        public bool paginacion { get; set; }
        public int cantidadDeRegistrosAMostrar { get; set; }
        public ConsultarApi(bool consultaApi = false, string baseUrl = "", bool paginacion = false, int cantidadDeRegistrosAMostrar = 10)
        {
            this.consultaApi = consultaApi;
            this.baseUrl = baseUrl;
            this.paginacion = paginacion;
            this.cantidadDeRegistrosAMostrar = cantidadDeRegistrosAMostrar;
        }

    }

    public async Task ListarItemsApi(int pagina = 1)
    {
        responseHttp = await repositorio.Get<List<T>>($"{consultaApi.baseUrl}pagina={pagina}&cantidadDeRegistros={consultaApi.cantidadDeRegistrosAMostrar}");
        if (!responseHttp.Error)
        {
            listado = responseHttp.Response;

            var conteo = responseHttp.HttpResponseMessage.Headers.GetValues("conteo").FirstOrDefault();

            paginasTotales = int.Parse(responseHttp.HttpResponseMessage.Headers.GetValues("totalPaginas").FirstOrDefault());

        }



    }

    private async Task paginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        await ListarItemsApi(pagina);
    }
    protected override async Task OnInitializedAsync()
    {
        await ListarItemsApi();
    }
    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    await ListarItemsApi();
    //}

    //protected override async Task OnParametersSetAsync()
    //{
    //    await ListarItemsApi();
    //}


    public async Task click_boton_editar(T item)
    {
        await selectTitem.InvokeAsync(item);
        await ToggleModal(modalIdEditar);
    }
    public async Task click_boton_eliminar(T item)
    {
        await selectTitem.InvokeAsync(item);
        await ToggleModal(modalIdEliminar);
    }



    public async Task ToggleModal(string id)
    {

        await js.InvokeAsync<object>("ModalToggle", id);
    }

    public static object GetPropertyValue(object src, string propName)
    {
        if (src == null) return "-";
        if (propName == null) throw new ArgumentException("Value cannot be null.", "propName");

        if(propName.Contains("."))//complex type nested
        {
            var temp = propName.Split(new char[] { '.' }, 2);
            Console.WriteLine(temp);
            return GetPropertyValue(GetPropertyValue(src, temp[0]), temp[1]);
        }
        else
        {
            var prop = src.GetType().GetProperty(propName);
            return prop != null ? prop.GetValue(src, null) : "-";
        }
    }

}

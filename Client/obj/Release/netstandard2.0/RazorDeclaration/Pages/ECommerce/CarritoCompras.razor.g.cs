#pragma checksum "C:\Users\agust\source\repos\SurcosBlazor\Client\Pages\ECommerce\CarritoCompras.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "46201c060f35004be82a7948e84b9a787a02e518"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace SurcosBlazor.Client.Pages.ECommerce
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#line 2 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#line 3 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#line 4 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#line 5 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#line 6 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using SurcosBlazor.Client;

#line default
#line hidden
#line 7 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using SurcosBlazor.Client.Shared;

#line default
#line hidden
#line 9 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#line 10 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using SurcosBlazor.Client.Helpers;

#line default
#line hidden
#line 11 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using SurcosBlazor.Shared.Entidades;

#line default
#line hidden
#line 12 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using SurcosBlazor.Shared;

#line default
#line hidden
#line 13 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using SurcosBlazor.Client.Repositorio;

#line default
#line hidden
#line 14 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#line 15 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using Blazored.Toast;

#line default
#line hidden
#line 16 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using Blazored.Toast.Services;

#line default
#line hidden
#line 5 "C:\Users\agust\source\repos\SurcosBlazor\Client\Pages\ECommerce\CarritoCompras.razor"
using System.Net.Http;

#line default
#line hidden
#line 6 "C:\Users\agust\source\repos\SurcosBlazor\Client\Pages\ECommerce\CarritoCompras.razor"
using System.Text;

#line default
#line hidden
#line 7 "C:\Users\agust\source\repos\SurcosBlazor\Client\Pages\ECommerce\CarritoCompras.razor"
using System.Text.Json;

#line default
#line hidden
#line 9 "C:\Users\agust\source\repos\SurcosBlazor\Client\Pages\ECommerce\CarritoCompras.razor"
using SurcosBlazor.Client.Auth;

#line default
#line hidden
    public partial class CarritoCompras : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#line 348 "C:\Users\agust\source\repos\SurcosBlazor\Client\Pages\ECommerce\CarritoCompras.razor"
       
    public Pedido pedido { get; set; } = new Pedido { Domicilio = new Domicilio { Provincia = new Provincia(), Departamento = new Departamento() } };
    [Parameter] public bool Show { get; set; }
    [Parameter] public EventCallback toggle { get; set; }
    [Parameter] public Departamento departamento { get; set; }
    [Parameter] public ListaPrecios listaVigente { get; set; }

    [Parameter] public List<ListaPrecios> listasHabilitadas { get; set; }
    public string codigoArea { get; set; }
    public string celSinQuince { get; set; }
    public List<notificacion> notificaciones { get; set; } = new List<notificacion>();
    public List<Vendedor> vendedores { get; set; } = new List<Vendedor>();
    public bool cargando { get; set; } = false;
    public ProductoPresentacion producto { get; set; }
    public int cantidad { get; set; }
    public List<DateTime> diasQueTrabaja { get; set; }
    public string celConfirm { get; set; }
    public bool seRecuperoCarrito { get; set; } = false;
    [Parameter] public EventCallback callback { get; set; }
    [Parameter] public Func<int, Task> callbackLogin { get; set; }
    [Parameter] public bool estaAutentificado { get; set; }
    public string contraseña { get; set; }
    public class notificacion
    {
        public ProductoPresentacion productoPresentacion { get; set; }

        public int cantidad { get; set; }
        public bool entra { get; set; }
        public bool sale { get; set; }
    }

    protected override async Task OnAfterRenderAsync(bool first)
    {
        if (first)
        {


        }
    }
    public async Task CrearPedido()
    {

        bool bandera = false;
        if (!estaAutentificado)
        {
            if (string.IsNullOrEmpty(contraseña) || contraseña.Length < 6)
            {
                cargando = false;

                await Alerta("center", "error", "La contraseña tiene que tener más de 6 caracteres");

            }
            else
            {
                bandera = await CrearUsuario();
            }
        }
        else { bandera = true; }
        if (bandera)
        {
            pedido.detallePedido.ForEach(x => x.ProductoPresentacion.Proveedor = null);
            var response = await repositorio.Post<Pedido>("api/Pedido", pedido);

            if (response.Error)
            {
                cargando = false;

                await Alerta("center", "error", response.HttpResponseMessage.Content.ReadAsStringAsync().Result);
            }
            else
            {

                pedido.detallePedido = new List<DetallePedido>();
                pedido.Vendedor = null;
                pedido.VendedorId = 0;
                pedido.total = 0.00M;
                diasQueTrabaja = null;
                await toggle.InvokeAsync(new Object());
                await js.SetInLocalStorage("Carrito", "");
                await js.SetInLocalStorage("lista", "");
                this.StateHasChanged();
                cargando = false;
                await Alerta("center", "success", $"Se creó correctamente el pedido, se envió a {pedido.emailCliente} el aviso");

            }
        }
        if ((!estaAutentificado) && bandera == true)
        {
            await LoginUsuario(new UserInfo { username = pedido.emailCliente, Password = contraseña });
        }




    }
    public async Task<bool> CrearUsuario()
    {
        UserClienteInfo user = new UserClienteInfo
        {
            Cliente = new Cliente
            {
                apellido = pedido.apellidoCliente,
                nombre = pedido.nombreCliente,
                email = pedido.emailCliente,
                celular = pedido.celularCliente,
                Domicilio = new Domicilio
                {
                    ProvinciaId = pedido.Domicilio.ProvinciaId,
                    DepartamentoId = pedido.Domicilio.DepartamentoId,
                    calle = pedido.Domicilio.calle,
                    numero = pedido.Domicilio.numero,
                    piso = pedido.Domicilio.piso,
                    manzana = pedido.Domicilio.manzana,
                    longitud = pedido.Domicilio.longitud,
                    latitud = pedido.Domicilio.latitud,
                }
            },
            Password = contraseña
        };

        var enviarJSON = JsonSerializer.Serialize(user);
        var enviarContent = new StringContent(enviarJSON, Encoding.UTF8, "application/json");
        var result = await http.PostAsync("api/Account/CrearUserCliente", enviarContent);
        if (!result.IsSuccessStatusCode)
        {
            string errorMessage = await result.Content.ReadAsStringAsync();
            errorMessage = errorMessage.Count() > 50 ? "Ocurrió un error" : errorMessage;
            cargando = false;

            await Alerta("center", "error", $"{errorMessage}");

            return false;
        }
        else
        {
            pedido.ClienteId = (await http.GetJsonAsync<Cliente>($"api/Cliente/porEmail?email={user.Cliente.email}")).Id;
            return true;
        }
    }
    public async Task ActualizarParametrosCarrito(Cliente cliente, Provincia provincia, Departamento departamento)
    {
        await js.InvokeVoidAsync("initSlider");
        if (provincia != null)
        {
            pedido.Domicilio.Provincia = provincia;
            pedido.Domicilio.ProvinciaId = provincia.Id;

        }
        if (departamento != null)
        {
            pedido.Domicilio.Departamento = departamento;
        }
        if (cliente.Id != 0 && cliente.Id != pedido.ClienteId)
        {
            pedido.ClienteId = cliente.Id;
            pedido.nombreCliente = cliente.nombre;
            pedido.apellidoCliente = cliente.apellido;
            pedido.emailCliente = cliente.email;
            pedido.celularCliente = cliente.celular;
            pedido.Domicilio.calle = cliente.Domicilio.calle;
            pedido.Domicilio.numero = cliente.Domicilio.numero;
            pedido.Domicilio.manzana = cliente.Domicilio.manzana;
            pedido.Domicilio.codigoPostal = cliente.Domicilio.codigoPostal;
            pedido.Domicilio.latitud = cliente.Domicilio.latitud;
            pedido.Domicilio.longitud = cliente.Domicilio.longitud;
            pedido.Domicilio.ProvinciaId = cliente.Domicilio.ProvinciaId;
            pedido.Domicilio.DepartamentoId = cliente.Domicilio.DepartamentoId;
            pedido.Domicilio.Provincia.nombre = cliente.Domicilio.Provincia.nombre;
            pedido.Domicilio.Departamento.nombre = cliente.Domicilio.Departamento.nombre;
            codigoArea = pedido.celularCliente.Substring(0, 3);
            celSinQuince = pedido.celularCliente.Substring(3, 7);
        }

        if (pedido.Domicilio.Departamento != null && pedido.Vendedor == null)
        {
            await ChangeDepartamento(pedido.Domicilio.Departamento);
        }
        if (pedido.ClienteId != 0)
        {
            await ActualizarMapa();


        }
        await ListarVendedores();

    }



    public async Task AgregarProducto(ProductoPresentacion prod, int cantidad, int listaId)
    {
        int cantidadAnterior = 0;
        if (pedido.ListaPreciosId != 0 && pedido.ListaPreciosId != listaId && pedido.detallePedido.Count > 0)
        {
            toastService.ShowWarning("No puede agregar productos de listas distintas. Para cambiar de lista tienes que vaciar el carrito primero");
        }
        else
        {
            pedido.ListaPreciosId = listaId;
            pedido.ListaPrecios = listaVigente;
            await js.SetInLocalStorage("lista", Convert.ToString(listaId));
            if (pedido.detallePedido.Where(x => x.ProductoPresentacion.Id == prod.Id).Count() > 0)
            {
                cantidadAnterior = pedido.detallePedido.FirstOrDefault(x => x.ProductoPresentacion.Id == prod.Id).cantidad;

                pedido.detallePedido.FirstOrDefault(x => x.ProductoPresentacion.Id == prod.Id).cantidad = cantidad;

            }
            else
            {

                decimal precio = listaVigente.DetalleListaPrecios.Single(x => x.ProductoPresentacionId == prod.Id).precioUnitarioFinal;

                pedido.detallePedido.Add(new DetallePedido { ProductoPresentacionId = prod.Id, ProductoPresentacion = prod, cantidad = cantidad, precioUnitario = precio });

            }


            CalcularTotal();
            notificacion notificacion = new notificacion
            {
                productoPresentacion = prod,
                entra = cantidad > cantidadAnterior ? true : false,
                sale = cantidad < cantidadAnterior ? true : false,
                cantidad = Math.Abs(cantidadAnterior - cantidad)
            };


            notificaciones.Add(notificacion);
            LimpiarNotifiacion(notificacion);
            await carritoInLocalStore();
            //await mostrarNotificacion();
        }
    }
    public async Task Alerta(string posicion = "top-end", string icono = "success", string mensaje = "Se creó el producto con éxito")
    {
        await js.InvokeAsync<object>("alerta", posicion, icono, mensaje);
    }
    public async Task AgregarProductoLocalStore(ProductoPresentacion prod, int cantidad, int listaId)
    {

        pedido.ListaPreciosId = listaId;
        if (pedido.detallePedido.Where(x => x.ProductoPresentacion.Id == prod.Id).Count() > 0)
        {
            pedido.detallePedido.FirstOrDefault(x => x.ProductoPresentacion.Id == prod.Id).cantidad = cantidad;
        }
        else
        {


            decimal precio = listaVigente.DetalleListaPrecios.Single(x => x.ProductoPresentacionId == prod.Id).precioUnitarioFinal;
            pedido.detallePedido.Add(new DetallePedido { ProductoPresentacionId = prod.Id, ProductoPresentacion = prod, cantidad = cantidad, precioUnitario = precio });

        }
        CalcularTotal();
        this.producto = prod;
        this.cantidad = cantidad;
    }

    public async Task carritoInLocalStore()
    {
        string carritoLocalStore = "";

        foreach (DetallePedido detalle in pedido.detallePedido)
        {

            carritoLocalStore += $"{detalle.ProductoPresentacion.Id}-{detalle.cantidad},";
        }
        carritoLocalStore = carritoLocalStore.TrimEnd(',');
        await js.SetInLocalStorage("Carrito", carritoLocalStore);
    }

    public async Task RecuperarCarritoLocalStore()
    {
        string carrito = await js.GetFromLocalStorage("Carrito");
        string lista = await js.GetFromLocalStorage("lista");

        if (!string.IsNullOrWhiteSpace(carrito) && !string.IsNullOrWhiteSpace(lista))
        {
            if (listaVigente.Id == (Convert.ToInt32(lista)))
            {
                var elemCarrito = carrito.Split(',');

                foreach (string producto in elemCarrito)
                {
                    var detalle = producto.Split('-');
                    try
                    {
                        ProductoPresentacion productoPresentacion = listaVigente.DetalleListaPrecios.Single(x => x.ProductoPresentacionId == Convert.ToInt32(detalle[0])).ProductoPresentacion;
                        await AgregarProductoLocalStore(productoPresentacion, Convert.ToInt32(detalle[1]), Convert.ToInt32(lista));

                    }
                    catch (Exception)
                    {
                        toastService.ShowWarning("Algunos productos que estaban en el carrito ya no existen en esta lista");
                    }
                }
            }
            else
            {
                toastService.ShowWarning("La lista de precios con la que estaba cargada tu carrito no está habilitado para este usuario/localidad, por favor ingresa con tu usuario.");
            }
        }
        await callback.InvokeAsync(new Object());

    }



    private async Task LoginUsuario(UserInfo userInfo)
    {
        if (userInfo.username != "" && userInfo.username != null && userInfo.Password != "" && userInfo.Password != null)
        {
            try
            {
                var enviarJSON = JsonSerializer.Serialize(userInfo);
                var enviarContent = new StringContent(enviarJSON, Encoding.UTF8, "application/json");

                var result = await http.PostAsync($"api/account/LoginECommerce/", enviarContent);
                if (result.IsSuccessStatusCode)
                {
                    var response = await DeserializarRespuesta<UserClienteInfo>(result, new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
                    await loginService.Login(response.userToken.Token);
                    await callbackLogin.Invoke(response.ClienteId ?? 0);
                }

                else
                {
                    string errorMessage = await result.Content.ReadAsStringAsync();
                    await Alerta("center", "error", errorMessage);

                }
            }
            catch (Exception ex)
            {
            }


        }
        else
        {
            toastService.ShowError("Usuario o contraseña incorrectos");
        }
    }
    private async Task<UserInfo> DeserializarRespuesta<UserClienteInfo>(HttpResponseMessage httpResponse, JsonSerializerOptions jsonSerializerOptions)
    {
        var responseString = await httpResponse.Content.ReadAsStringAsync();
        return JsonSerializer.Deserialize<UserInfo>(responseString, jsonSerializerOptions);
    }

    public async Task ChangeDepartamento(Departamento departamento)
    {
        pedido.Domicilio.Departamento = departamento;
        pedido.Domicilio.DepartamentoId = departamento.Id;
        pedido.Vendedor = null;
        pedido.fechaEntrega = new DateTime();

        await ListarVendedores();
    }
    public async Task ListarVendedores()
    {
        Console.WriteLine($"Listando Vendedores DepartamentoId{pedido.Domicilio.DepartamentoId}");
        if (pedido.Domicilio.DepartamentoId != 0 && pedido.Domicilio.DepartamentoId != null)
        {
            vendedores = await http.GetJsonAsync<List<Vendedor>>($"api/Vendedor/VendedorEcommerce?departamendoId={pedido.Domicilio.DepartamentoId}");
            if (vendedores.Count > 0)
            {
                await SelecVendedor(vendedores[0]);
            }

        }


    }
    public async Task SelecVendedor(Vendedor vendedor)
    {
        pedido.Vendedor = vendedor;
        pedido.VendedorId = vendedor.Id;
        diasQueTrabaja = await http.GetJsonAsync<List<DateTime>>($"api/VendedorDepartamento/DiasQueTrabaja?vendedorId={pedido.Vendedor.Id}&departamentoId={pedido.Domicilio.DepartamentoId}");
        pedido.fechaEntrega = new DateTime();

    }
    public async Task ActualizarMapa()
    {
        if (pedido.Domicilio.numero != 0 && !string.IsNullOrWhiteSpace(pedido.Domicilio.calle) && pedido.Domicilio.Provincia != null && pedido.Domicilio.Departamento != null && !string.IsNullOrWhiteSpace(pedido.Domicilio.Departamento.nombre) && !string.IsNullOrWhiteSpace(pedido.Domicilio.Provincia.nombre))
        {
            List<decimal> coords = await js.InvokeAsync<List<decimal>>("buscarCoordenadas", $"{pedido.Domicilio.numero}+{pedido.Domicilio.calle}+{pedido.Domicilio.Departamento.nombre}+{pedido.Domicilio.Provincia.nombre}+Argentina", "mapaCarrito");
            pedido.Domicilio.latitud = coords[0];
            pedido.Domicilio.longitud = coords[1];

        }

    }

    public void CalcularTotal()
    {
        pedido.total = pedido.detallePedido.Sum(x => x.precioUnitario * x.cantidad);
    }

    public async void LimpiarNotifiacion(notificacion notificacion)
    {
        await Task.Delay(TimeSpan.FromSeconds(4)).ContinueWith(x =>
        {
            notificaciones.Remove(notificacion);
            this.StateHasChanged();
        });

    }

    public async Task removeFromProducCard(ProductoPresentacion producto)
    {
        int cantidad = pedido.detallePedido.Single(x => x.ProductoPresentacionId == producto.Id).cantidad;
        pedido.detallePedido.Remove(pedido.detallePedido.Single(x => x.ProductoPresentacionId == producto.Id));
        await carritoInLocalStore();
        CalcularTotal();

        notificacion notificacion = new notificacion
        {
            productoPresentacion = producto,
            entra = false,
            sale = true,
            cantidad = Math.Abs(cantidad)
        };


        notificaciones.Add(notificacion);
        LimpiarNotifiacion(notificacion);

    }

#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ILoginService loginService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IRepositorio repositorio { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime js { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IToastService toastService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient http { get; set; }
    }
}
#pragma warning restore 1591

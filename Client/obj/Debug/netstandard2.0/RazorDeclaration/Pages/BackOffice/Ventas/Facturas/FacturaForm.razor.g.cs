#pragma checksum "C:\Users\agust\source\repos\SurcosBlazor\Client\Pages\BackOffice\Ventas\Facturas\FacturaForm.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "1c89e1b0fc52321348cfc7ae3caab2fdcf1a760a"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace SurcosBlazor.Client.Pages.BackOffice.Ventas.Facturas
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#line 1 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#line 2 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#line 3 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#line 4 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#line 5 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#line 6 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using SurcosBlazor.Client;

#line default
#line hidden
#line 7 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using SurcosBlazor.Client.Shared;

#line default
#line hidden
#line 9 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#line 10 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using SurcosBlazor.Client.Helpers;

#line default
#line hidden
#line 11 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using SurcosBlazor.Shared.Entidades;

#line default
#line hidden
#line 12 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using SurcosBlazor.Shared;

#line default
#line hidden
#line 13 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using SurcosBlazor.Client.Repositorio;

#line default
#line hidden
#line 14 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#line 15 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using Blazored.Toast;

#line default
#line hidden
#line 16 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using Blazored.Toast.Services;

#line default
#line hidden
#line 9 "C:\Users\agust\source\repos\SurcosBlazor\Client\Pages\BackOffice\Ventas\Facturas\FacturaForm.razor"
           [Authorize(Roles = "Admin, Ventas")]

#line default
#line hidden
    [Microsoft.AspNetCore.Components.LayoutAttribute(typeof(BackOfficeLayout))]
    [Microsoft.AspNetCore.Components.RouteAttribute("/BackOffice/Ventas/Comprobante")]
    public partial class FacturaForm : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#line 348 "C:\Users\agust\source\repos\SurcosBlazor\Client\Pages\BackOffice\Ventas\Facturas\FacturaForm.razor"
       
    public int Id { get; set; } = 0;
    public TablaGenerica<Cliente> tablaClientes { get; set; }
    public Factura factura { get; set; } = new Factura { Domicilio = new Domicilio() };
    public string userName { get; set; }
    public List<Vendedor> vendedores { get; set; }
    public System.Security.Claims.ClaimsPrincipal User { get; set; }
    public List<Provincia> provincias { get; set; }
    public List<Departamento> departamentos { get; set; }
    public CategoriaProducto categoria { get; set; } = new CategoriaProducto();
    public List<Producto> productos { get; set; }
    public List<ProductoPresentacion> productoPresentaciones { get; set; }
    public List<ListaPrecios> listas { get; set; }
    public List<EstadoFactura> estadosFactura { get; set; }
    public List<Deposito> depositos { get; set; }
    public List<TipoComprobante> tiposComprobante { get; set; }
    public ListaPrecios lista { get; set; }
    public bool cargando { get; set; }
    public bool modoAdmin { get; set; }
    protected override async Task OnParametersSetAsync()
    {
        if (Id != 0)
        {
            factura = await http.GetJsonAsync<Factura>($"api/Factura/{Id}");
            await ListarListas();
            await BuscarDepartamentosDeVendedor();

        }
    }
    public async Task ListarListas()
    {
        if (factura.ClienteId == 0)
        {
            listas = await http.GetJsonAsync<List<ListaPrecios>>($"api/ListaPrecios/ListaPrecioEcommerce?provinciaId={factura.Domicilio.ProvinciaId}&clienteId=0");

        }
        else
        {
            listas = await http.GetJsonAsync<List<ListaPrecios>>($"api/ListaPrecios/ListaPrecioEcommerce?provinciaId={factura.Domicilio.ProvinciaId}&clienteId={factura.ClienteId}");

        }

        if (listas.Count() > 0)
        {
            if (lista == null)
            {
                await seleccionarLista(factura.ListaPreciosId != 0 ? factura.ListaPreciosId : listas[0].Id);
                cargarProductos();
                await ActualizarMapa();

            }
        }
        else
        {
            lista = null;

        }
    }
    public async Task BuscarEstadoFactura()
    {

        estadosFactura = await http.GetJsonAsync<List<EstadoFactura>>("api/EstadoFactura");

    }
    public async Task ListarVendedores()
    {
        var respuesta = await repositorio.Get<List<Vendedor>>($"api/factura/vendedoresHabilitados?userName={userName}");
        if (!respuesta.Error)
        {
            vendedores = respuesta.Response;
        }
        else
        {
            toastService.ShowError(await respuesta.HttpResponseMessage.Content.ReadAsStringAsync());
        }
    }
    public async Task ListarDepositos()
    {
        var respuesta = await repositorio.Get<List<Deposito>>($"api/deposito/depositosHabilitados?userName={userName}");
        if (!respuesta.Error)
        {
            depositos = respuesta.Response;
        }
        else
        {
            toastService.ShowError(await respuesta.HttpResponseMessage.Content.ReadAsStringAsync());
        }
    }
    protected override async Task OnInitializedAsync()
    {
        var authState = await authStateProvider.GetAuthenticationStateAsync();
        User = authState.User;
        userName = User.Identity.Name;
        await ListarVendedores();
        await ListarDepositos();
        await ListarTiposComprobante();

        if (Id != 0)
        {
            await BuscarEstadoFactura();
        }
    }
    public async Task<List<Cliente>> buscarClientes(string clienteName)
    {
        if (User.IsInRole("Admin"))
        {
            return await http.GetJsonAsync<List<Cliente>>($"api/Cliente/ClientePorZonaVendedor?filtro={clienteName}&admin=true&vendedorId={factura.Vendedor.Id}");
        }
        else
        {
            return await http.GetJsonAsync<List<Cliente>>($"api/Cliente/ClientePorZonaVendedor?filtro={clienteName}&admin=false&vendedorId={factura.Vendedor.Id}");

        }
    }
    public async Task<Cliente> clienteSeleccionado(Cliente cliente)
    {
        factura.Cliente = cliente;
        factura.ClienteId = cliente.Id;
        factura.Domicilio.calle = factura.Cliente.Domicilio.calle;
        factura.Domicilio.numero = factura.Cliente.Domicilio.numero;
        factura.Domicilio.manzana = factura.Cliente.Domicilio.manzana;
        factura.Domicilio.piso = factura.Cliente.Domicilio.piso;
        factura.Domicilio.Provincia = factura.Cliente.Domicilio.Provincia;
        factura.Domicilio.ProvinciaId = factura.Cliente.Domicilio.ProvinciaId;
        factura.Domicilio.Departamento = factura.Cliente.Domicilio.Departamento;
        factura.Domicilio.DepartamentoId = factura.Cliente.Domicilio.DepartamentoId;

        factura.nombreCliente = factura.Cliente.nombre;
        factura.apellidoCliente = factura.Cliente.apellido;
        factura.celularCliente = factura.Cliente.celular;
        factura.emailCliente = factura.Cliente.email;
        await ListarListas();

        this.StateHasChanged();
        return cliente;
    }
    public async Task ListarTiposComprobante()
    {
        tiposComprobante = await http.GetJsonAsync<List<TipoComprobante>>("api/tipocomprobante");
    }

    public async Task CrearFactura()
    {

        //creacion de factura
        if (Id == 0)
        {
            var response = await repositorio.Post<Factura>("api/Factura", factura);

            if (response.Error)
            {
                cargando = false;
                toastService.ShowError(await response.HttpResponseMessage.Content.ReadAsStringAsync());
            }
            else
            {
                cargando = false;

                toastService.ShowSuccess("Se creó el factura correctamente!");
                factura.detallesFactura = new List<DetalleFactura>();
                factura.Vendedor = new Vendedor();
                factura.VendedorId = 0;
                uri.NavigateTo("/BackOffice/Ventas/ListadoComprobantes");
                this.StateHasChanged();
            }
        }
        //Edicion de factura
        else
        {
            var response = await repositorio.Put<Factura>($"api/Factura/{factura.Id}", factura);

            if (response.Error)
            {
                cargando = false;

                toastService.ShowError(await response.HttpResponseMessage.Content.ReadAsStringAsync());
            }
            else
            {
                cargando = false;

                toastService.ShowSuccess("Se editó el factura correctamente!");
                uri.NavigateTo("/BackOffice/Ventas/ListadoComprobantes");
                this.StateHasChanged();
            }
        }
    }
    public async Task ToggleModal(string id)
    {

        await js.InvokeAsync<object>("ModalToggle", id);
    }

    public async Task BuscarDepartamentosDeVendedor()
    {

        departamentos = await http.GetJsonAsync<List<Departamento>>($"api/Departamento/DepartamentosDeVendedor?vendedorId={factura.VendedorId}");
        provincias = departamentos.Select(x => x.Provincia).Distinct().ToList();
        this.StateHasChanged();
    }

    public void cargarProductos()
    {
        productoPresentaciones = null;
        productos = null;
        productoPresentaciones = lista.DetalleListaPrecios.Select(x => x.ProductoPresentacion).OrderBy(x => x.PresentacionProducto.cantidad).Distinct().ToList();
        productos = productoPresentaciones.Select(x => x.Producto).Distinct().OrderBy(x => x.nombre).ToList();

    }
    public async Task seleccionarLista(int id)
    {

        lista = await http.GetJsonAsync<ListaPrecios>($"api/ListaPrecios/{id}");
        factura.ListaPrecios = lista;
        factura.ListaPreciosId = lista.Id;
        cargarProductos();

    }
    public async Task ActualizarMapa()
    {
        if (factura.Domicilio.numero != 0 && !string.IsNullOrWhiteSpace(factura.Domicilio.calle) && factura.Domicilio.Provincia != null && factura.Domicilio.Departamento != null && !string.IsNullOrWhiteSpace(factura.Domicilio.Departamento.nombre) && !string.IsNullOrWhiteSpace(factura.Domicilio.Provincia.nombre))
        {
            List<decimal> coords = await js.InvokeAsync<List<decimal>>("buscarCoordenadas", $"{factura.Domicilio.numero}+{factura.Domicilio.calle}+{factura.Domicilio.Departamento.nombre}+{factura.Domicilio.Provincia.nombre}+Argentina", "mapaFacturaForm");
            factura.Domicilio.latitud = coords[0];
            factura.Domicilio.longitud = coords[1];

        }
        else
        {
            Console.WriteLine("No estan todos los campos completos");
        }
    }


    public void SelectPresentacionDetalle(int presentacionId, DetalleFactura detalle)
    {


        detalle.ProductoPresentacion = productoPresentaciones
                                          .FirstOrDefault(x => x.PresentacionProductoId == presentacionId && x.ProductoId == detalle.ProductoPresentacion.ProductoId);

        detalle.ProductoPresentacionId = productoPresentaciones
                                        .FirstOrDefault(x => x.PresentacionProductoId == presentacionId && x.ProductoId == detalle.ProductoPresentacion.ProductoId).Id;

        detalle.precioUnitario = lista.DetalleListaPrecios.FirstOrDefault(x =>
        {
            return x.ProductoPresentacion.ProductoId == detalle.ProductoPresentacion.ProductoId
                   && x.ProductoPresentacion.PresentacionProductoId == detalle.ProductoPresentacion.PresentacionProductoId;
        }).precioUnitarioFinal;
        detalle.costo = lista.DetalleListaPrecios.FirstOrDefault(x =>
        {
            return x.ProductoPresentacion.ProductoId == detalle.ProductoPresentacion.ProductoId
                   && x.ProductoPresentacion.PresentacionProductoId == detalle.ProductoPresentacion.PresentacionProductoId;
        }).precioCosto;
        CalcularTotal();
        this.StateHasChanged();

    }


    public void CalcularTotal()
    {
        factura.totalComprobante = factura.detallesFactura.Sum(x => x.precioUnitario * x.cantidad);
        factura.costoTotal = factura.detallesFactura.Sum(x => x.costo);

    }

#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager uri { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IToastService toastService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IRepositorio repositorio { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AuthenticationStateProvider authStateProvider { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient http { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime js { get; set; }
    }
}
#pragma warning restore 1591

#pragma checksum "C:\Users\agust\source\repos\SurcosBlazor\Client\Pages\BackOffice\Ventas\Cliente\ClienteForm.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "77dad91e012d3a57c0299eeab4651b515ed055f5"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace SurcosBlazor.Client.Pages.BackOffice.Ventas.Cliente
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#line 2 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#line 3 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#line 4 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#line 5 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#line 6 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using SurcosBlazor.Client;

#line default
#line hidden
#line 7 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using SurcosBlazor.Client.Shared;

#line default
#line hidden
#line 9 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#line 10 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using SurcosBlazor.Client.Helpers;

#line default
#line hidden
#line 11 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using SurcosBlazor.Shared.Entidades;

#line default
#line hidden
#line 12 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using SurcosBlazor.Shared;

#line default
#line hidden
#line 13 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using SurcosBlazor.Client.Repositorio;

#line default
#line hidden
#line 14 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#line 15 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using Blazored.Toast;

#line default
#line hidden
#line 16 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using Blazored.Toast.Services;

#line default
#line hidden
#line 2 "C:\Users\agust\source\repos\SurcosBlazor\Client\Pages\BackOffice\Ventas\Cliente\ClienteForm.razor"
using System.Net.Http;

#line default
#line hidden
#line 3 "C:\Users\agust\source\repos\SurcosBlazor\Client\Pages\BackOffice\Ventas\Cliente\ClienteForm.razor"
using System.Text;

#line default
#line hidden
#line 4 "C:\Users\agust\source\repos\SurcosBlazor\Client\Pages\BackOffice\Ventas\Cliente\ClienteForm.razor"
using System.Text.Json;

#line default
#line hidden
#line 5 "C:\Users\agust\source\repos\SurcosBlazor\Client\Pages\BackOffice\Ventas\Cliente\ClienteForm.razor"
using SurcosBlazor.Client.Auth;

#line default
#line hidden
#line 12 "C:\Users\agust\source\repos\SurcosBlazor\Client\Pages\BackOffice\Ventas\Cliente\ClienteForm.razor"
           [Authorize(Roles = "Admin, Ventas")]

#line default
#line hidden
    [Microsoft.AspNetCore.Components.LayoutAttribute(typeof(BackOfficeLayout))]
    [Microsoft.AspNetCore.Components.RouteAttribute("/BackOffice/Ventas/Cliente/{Id:int}")]
    public partial class ClienteForm : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#line 239 "C:\Users\agust\source\repos\SurcosBlazor\Client\Pages\BackOffice\Ventas\Cliente\ClienteForm.razor"
       
    [Parameter]
    public int Id { get; set; }
    public List<Provincia> provincias { get; set; } = new List<Provincia>();
    public List<Departamento> departamentos { get; set; } = new List<Departamento>();
    public List<CategoriaCliente> categorias { get; set; } = new List<CategoriaCliente>();

    public bool error { get; set; } = false;
    public string errorMessage { get; set; }
    public Cliente cliente { get; set; }
    public List<Comprobante> comprobantes { get; set; } = new List<Comprobante>();
    [Parameter] public EventCallback callback { get; set; }

    public async Task Confimar()
    {

        cliente.Domicilio.Provincia = null;
        cliente.Domicilio.Departamento = null;
        var enviarJSON = JsonSerializer.Serialize(cliente);
        var enviarContent = new StringContent(enviarJSON, Encoding.UTF8, "application/json");
        HttpResponseMessage result;
        if (cliente.Id == 0)
        {

            result = await http.PostAsync("api/Cliente", enviarContent);
            if (!result.IsSuccessStatusCode)
            {
                error = true;
                errorMessage = await result.Content.ReadAsStringAsync();
                errorMessage = errorMessage.Count() > 50 ? "Ocurrió un error" : errorMessage;
            }
            else
            {
                uri.NavigateTo("/BackOffice/Ventas/ListadoClientes");

            }
        }
        else
        {

            result = await http.PutAsync($"api/Cliente/{cliente.Id}", enviarContent);
            if (!result.IsSuccessStatusCode)
            {
                error = true;
                errorMessage = await result.Content.ReadAsStringAsync();
                errorMessage = errorMessage.Count() > 50 ? "Ocurrió un error" : errorMessage;
            }
            else
            {
                uri.NavigateTo("/BackOffice/Ventas/ListadoClientes");
            }

        }



    }

    protected override async Task OnParametersSetAsync()
    {
        

#line default
#line hidden
#line 299 "C:\Users\agust\source\repos\SurcosBlazor\Client\Pages\BackOffice\Ventas\Cliente\ClienteForm.razor"
         if (Id != 0)
        {
            cliente = await http.GetJsonAsync<Cliente>($"api/Cliente/{Id}");
            

#line default
#line hidden
#line 302 "C:\Users\agust\source\repos\SurcosBlazor\Client\Pages\BackOffice\Ventas\Cliente\ClienteForm.razor"
             if (cliente.Domicilio.Provincia != null)
            {
                departamentos = await http.GetJsonAsync<List<Departamento>>($"api/departamento?ProvinciaId={cliente.Domicilio.ProvinciaId}&cantidadDeRegistros=25");
            }

#line default
#line hidden
#line 305 "C:\Users\agust\source\repos\SurcosBlazor\Client\Pages\BackOffice\Ventas\Cliente\ClienteForm.razor"
             
            await listarComprobantesClientes();
            await ActualizarMapa();

        }
        else
        {
            cliente = new Cliente();
        }

#line default
#line hidden
#line 313 "C:\Users\agust\source\repos\SurcosBlazor\Client\Pages\BackOffice\Ventas\Cliente\ClienteForm.razor"
         
    }
    protected override async Task OnInitializedAsync()
    {
        provincias = await http.GetJsonAsync<List<Provincia>>("api/provincia?cantidadDeRegistros=25");
        categorias = await http.GetJsonAsync<List<CategoriaCliente>>("api/CategoriaCliente?cantidadDeRegistros=25");

        provincias = provincias.Where(x => x.eCommerce == true).ToList();
    }
    private async Task<UserInfo> DeserializarRespuesta<UserClienteInfo>(HttpResponseMessage httpResponse, JsonSerializerOptions jsonSerializerOptions)
    {
        var responseString = await httpResponse.Content.ReadAsStringAsync();
        return JsonSerializer.Deserialize<UserInfo>(responseString, jsonSerializerOptions);
    }

    public async Task ChangeProvincia(Provincia provincia)
    {
        departamentos = await http.GetJsonAsync<List<Departamento>>($"api/departamento?ProvinciaId={provincia.Id}&cantidadDeRegistros=25");
        cliente.Domicilio.Provincia = provincia;
        cliente.Domicilio.ProvinciaId = provincia.Id;
        cliente.Domicilio.Departamento = null;
        cliente.Domicilio.DepartamentoId = 0;


    }
    public async Task Eliminar()
    {
        await http.DeleteAsync($"api/Cliente/{cliente.Id}");
        uri.NavigateTo("/BackOffice/Ventas/ListadoClientes");

    }
    public void ChangeDepartamento(Departamento departamento)
    {
        cliente.Domicilio.Departamento = departamento;
        cliente.Domicilio.DepartamentoId = departamento.Id;

    }


    public async Task ActualizarMapa()
    {
        if (cliente.Domicilio.numero != 0 && !string.IsNullOrWhiteSpace(cliente.Domicilio.calle) && cliente.Domicilio.Provincia != null && cliente.Domicilio.Departamento != null && !string.IsNullOrWhiteSpace(cliente.Domicilio.Departamento.nombre) && !string.IsNullOrWhiteSpace(cliente.Domicilio.Provincia.nombre))
        {
            List<decimal> coords = await js.InvokeAsync<List<decimal>>("buscarCoordenadas", $"{cliente.Domicilio.numero}+{cliente.Domicilio.calle}+{cliente.Domicilio.Departamento.nombre}+{cliente.Domicilio.Provincia.nombre}+Argentina", "map");
            cliente.Domicilio.latitud = coords[0];
            cliente.Domicilio.longitud = coords[1];

        }
        else
        {
            Console.WriteLine(cliente.Domicilio.calle);
            Console.WriteLine("No estan todos los campos completos");
        }



    }
    public async Task listarComprobantesClientes()
    {
        if (Id != 0)
        {

            comprobantes.AddRange(await http.GetJsonAsync<List<Factura>>($"api/factura/facturasPorCliente?clienteId={Id}"));
            comprobantes.AddRange(await http.GetJsonAsync<List<ReciboCobranzas>>($"api/reciboCobranza/recibosPorCliente?clienteId={Id}"));
            comprobantes = comprobantes.OrderByDescending(x => x.fecha).ToList();
        }
    }
    public async Task ToggleModal(string id)
    {

        await js.InvokeAsync<object>("ModalToggle", id);
    }

#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager uri { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime js { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ILoginService loginService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IToastService toastService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient http { get; set; }
    }
}
#pragma warning restore 1591

#pragma checksum "C:\Users\agust\source\repos\SurcosBlazor\Client\Pages\ECommerce\Productos.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "f6efe7cbf508431062ae268498eea4c444f381d6"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace SurcosBlazor.Client.Pages.ECommerce
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#line 1 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#line 2 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#line 3 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#line 4 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#line 5 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#line 6 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using SurcosBlazor.Client;

#line default
#line hidden
#line 7 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using SurcosBlazor.Client.Shared;

#line default
#line hidden
#line 9 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#line 10 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using SurcosBlazor.Client.Helpers;

#line default
#line hidden
#line 11 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using SurcosBlazor.Shared.Entidades;

#line default
#line hidden
#line 12 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using SurcosBlazor.Shared;

#line default
#line hidden
#line 13 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using SurcosBlazor.Client.Repositorio;

#line default
#line hidden
#line 14 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#line 15 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using Blazored.Toast;

#line default
#line hidden
#line 16 "C:\Users\agust\source\repos\SurcosBlazor\Client\_Imports.razor"
using Blazored.Toast.Services;

#line default
#line hidden
#line 3 "C:\Users\agust\source\repos\SurcosBlazor\Client\Pages\ECommerce\Productos.razor"
using SurcosBlazor.Client.Pages.ECommerce;

#line default
#line hidden
    public partial class Productos : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#line 100 "C:\Users\agust\source\repos\SurcosBlazor\Client\Pages\ECommerce\Productos.razor"
       
    [Parameter] public Provincia provincia { get; set; } = new Provincia();
    [Parameter] public Func<ProductoPresentacion, int, int, Task> addProducto { get; set; }
    [Parameter] public Func<ProductoPresentacion, Task> deleteProducto { get; set; }

    [Parameter] public EventCallback cargarCarritoLocalStorage { get; set; }
    [Parameter] public int cantidad { get; set; }
    [Parameter] public int clienteId { get; set; }
    [Parameter] public List<DetallePedido> DetallesPedidoActual { get; set; }
    [Parameter] public decimal total { get; set; } = 0.00M;
    public CategoriaProducto categoria { get; set; } = new CategoriaProducto();
    public PresentacionProducto presentacion { get; set; } = new PresentacionProducto();
    public List<ListaPrecios> listas { get; set; }
    public List<ProductoPresentacion> productoPresentaciones { get; set; }
    public List<Producto> productos { get; set; }
    public List<Producto> ProductosAMostrar { get; set; } = new List<Producto>();
    public List<CategoriaProducto> categorias { get; set; } = new List<CategoriaProducto>();
    public List<PresentacionProducto> presentaciones { get; set; } = new List<PresentacionProducto>();
    public ListaPrecios lista { get; set; }
    [Parameter] public EventCallback toggleCarrito { get; set; }
    public int productosMostrados { get; set; } = 8;

    public async Task BuscarListas(int provinciaId, int clienteId) {
        Console.WriteLine($"Provincia desde productos: {provinciaId}");
        if (provinciaId != 0)
        {

            listas = await http.GetJsonAsync<List<ListaPrecios>>($"api/ListaPrecios/ListaPrecioEcommerce?provinciaId={provinciaId}&clienteId={clienteId}");
            var ListaId = await js.GetFromLocalStorage("lista");

            if (listas.Count() > 0)
            {
                if (lista == null)
                {
                    if (!string.IsNullOrEmpty(ListaId) && listas.Select(x => x.Id).Contains(Convert.ToInt32(ListaId)))
                    {
                        await seleccionarLista(Convert.ToInt32(ListaId));

                    }
                    else
                    {
                        await seleccionarLista(listas[0].Id);

                    }
                }
            }
            else
            {
                lista = null;
            }
        }

    }

    public async Task seleccionarLista(int id)
    {
        lista = null;
        lista = await http.GetJsonAsync<ListaPrecios>($"api/ListaPrecios/{id}");
        categoria = new CategoriaProducto();
        cargarProductos();
        await cargarCarritoLocalStorage.InvokeAsync(new object());
        this.StateHasChanged();

    }
    public void cargarProductos()
    {
        productoPresentaciones = null;
        productos = null;
        productoPresentaciones = lista.DetalleListaPrecios.Select(x => x.ProductoPresentacion).OrderBy(x => x.PresentacionProducto.cantidad).Distinct().ToList();
        productos = productoPresentaciones.Select(x => x.Producto).Distinct().OrderByDescending(x => x.CategoriaProducto.clasificacion).ThenBy(x => x.nombre).ToList();
        //infiniteScroll();
        //js.InvokeVoidAsync("InfiniteScroll", DotNetObjectReference.Create(this));

        cargarCategorias();
        cargarPresentaciones();
        this.StateHasChanged();

    }

    public void cargarCategorias()
    {
        categorias = productos.Select(x => x.CategoriaProducto).Distinct().OrderByDescending(x => x.clasificacion).ThenBy(x => x.nombre).ToList();
    }
    public void cargarPresentaciones()
    {
        presentaciones = productoPresentaciones.Select(x => x.PresentacionProducto).Distinct().OrderBy(x => x.cantidad).ToList();

    }
    [JSInvokable]
    public  void infiniteScroll() {

        ProductosAMostrar.AddRange(productos.Skip(ProductosAMostrar.Count).Take(4).ToList());
    }


    public void aplicarFiltros()
    {
        if (categoria != null && categoria.Id != 0)
        {
            productos = productoPresentaciones.Select(x => x.Producto).Distinct().Where(x => x.CategoriaProductoId == categoria.Id).OrderBy(x => x.nombre).ToList();


        }
        if (presentacion != null && presentacion.Id != 0)
        {
            productos = productoPresentaciones.OrderBy(x => x.PresentacionProducto.cantidad).Where(x => x.PresentacionProductoId == presentacion.Id).Distinct().Select(x => x.Producto).ToList();

        }

    }
    public decimal calcularPrecio(ProductoPresentacion prod)
    {
        try
        {
            return lista.DetalleListaPrecios.FirstOrDefault(x => x.ProductoPresentacionId == prod.Id).precioUnitarioFinal;

        }
        catch (Exception)
        {

            return 0.00M;
        }
    }
    public decimal descuento(ProductoPresentacion prod)
    {
        try
        {
            return lista.DetalleListaPrecios.FirstOrDefault(x => x.ProductoPresentacionId == prod.Id).porcentajeDescuento;

        }
        catch (Exception)
        {

            return 0.00M;
        }



    }
    public async Task goToLandingPage()
    {
        await js.InvokeAsync<object>("goToLandingPage");
    }

    public List<ProductoEnCarritoModel> convertirEnProductoDeCarrito(List<DetallePedido> detalles)
    {
        List<ProductoEnCarritoModel> productoEnCarritoModels = new List<ProductoEnCarritoModel>();
        foreach (DetallePedido detalle in detalles)
        {
            productoEnCarritoModels.Add(new ProductoEnCarritoModel { producto = detalle.ProductoPresentacion, cantidad = detalle.cantidad });
        }
        return productoEnCarritoModels;
    }

#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime js { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient http { get; set; }
    }
}
#pragma warning restore 1591

@inject IRepositorio repositorio
@layout BackOfficeLayout
@inject AuthenticationStateProvider authStateProvider
@inject IRepositorio repositorio
@inject IToastService toastService;
@inject IJSRuntime js
@inject NavigationManager uri
@inject HttpClient http

<div class="col-md-12 d-flex justify-content-end"><i class="fas fa-times mr-2" style="cursor:pointer" @onclick="@(async()=> await ToggleModal("pedidosCliente"))"></i></div>

<div class="listadoPedidos">
    <div class="d-flex justify-content-between">
        <h3>Pedidos @(pedidos != null ? $"({registrosTotales})": "")</h3>
        <div class="d-flex">
            <div class="btn btn-sm btn-olive mx-2" @onclick='(()=>ModalToggle("filtros"))'><i class="fas fa-filter mr-1"></i>Filtros</div>
        </div>
    </div>

    <ListadoGenerico listado="pedidos">
        <HayRegistros>
            <div class="pedidos my-2">
                <table class="table table-sm d-xs-block" style="overflow-x:auto;">
                    <tr>
                        <th>Fecha</th>
                        <th>Entrega</th>
                        <th>Localidad</th>
                        <th>Vendedor</th>
                        <th>Lista</th>
                        <th>Total</th>
                        <th>Estado</th>
                        <th>Acciones</th>

                    </tr>
                    @foreach (Pedido pedido in pedidos)
                    {

                        <tr class="mt-1">
                            <td class="d-flex"><div style="width:10px;height:20px" class="mr-1 @(pedido.EstadoPedido.nombre == "Cancelado" ? "bg-danger" : pedido.EstadoPedido.nombre == "Pendiente" ? "bg-success" : pedido.EstadoPedido.nombre == "Confirmado" ? "bg-info" : "")"></div>@(pedido.fecha.ToString("dd/MM HH:mm"))</td>
                            <td class="fechaEntrega">@(pedido.fechaEntrega.ToString("dd/MM"))</td>
                            <td class="localidad">@($"{pedido.Domicilio?.Provincia?.nombre}, {pedido.Domicilio?.Departamento?.nombre}")</td>
                            <td class="vendedor"><img src="@pedido.Vendedor.Foto" style="width:25px; height:25px; border-radius:50%;" />@(pedido.Vendedor.nombre)</td>
                            <td class="lista">@(pedido.ListaPrecios.TipoListaPrecio.nombre)</td>
                            <td class="total">$@(pedido.total)</td>
                            <td class="estado"><strong>@(pedido.EstadoPedido.nombre)</strong></td>
                            <td>
                                <div>
                                    <div class="btn btn-sm btn-secondary col-xs-6" @onclick="@(()=>selectPedido(pedido.Id))">Detalle</div>
                                    @if (pedido.EstadoPedido.nombre == "Pendiente")
                                    {<div class="btn btn-sm btn-danger col-xs-6" @onclick="@(async () => {await CambiarEstadoPedido(pedido.Id); await ListarPedidos(); })">Cancelar</div>}
                                </div>
                            </td>
                        </tr>
                    }
                </table>

                <PaginacionComp PaginaActual="paginaActual"
                                PaginasTotales="paginasTotales"
                                PaginaSeleccionada="paginaSeleccionada">
                </PaginacionComp>
            </div>
        </HayRegistros>

    </ListadoGenerico>
</div>
<Modal modalTitulo="Filtros" modalTamaño="modal-md" modalId="filtros">
    <div class="filtros my-3">




        <ListadoGenerico listado="tiposListaPrecio">
            <HayRegistros>
                <div class="col-md-12 mx-0 px-0 my-2">
                    <span class="col-md-12 mx-0 px-0">Lista de precios</span>
                    <select class="col-md-12" @onchange="@(async (ChangeEventArgs e)=> { tipoListaPrecioIdFiltro = Convert.ToInt32(e.Value.ToString());   })">
                        <option value="0">Todas</option>
                        @foreach (TipoListaPrecio tipo in tiposListaPrecio)
                        {
                            <option value="@tipo.Id">@tipo.nombre</option>
                        }
                    </select>
                </div>
            </HayRegistros>
        </ListadoGenerico>
        <ListadoGenerico listado="tiposListaPrecio">
            <HayRegistros>
                <div class="col-md-12 mx-0 px-0 my-2">
                    <span class="col-md-12 mx-0 px-0">Estado Pedido</span>
                    <select class="col-md-12" @onchange="@(async (ChangeEventArgs e)=> { estadoPedidoIdFiltro = Convert.ToInt32(e.Value.ToString());  })">
                        <option value="0">Todas</option>
                        @foreach (EstadoPedido estado in estadosPedido)
                        {
                            <option value="@estado.Id">@estado.nombre</option>
                        }
                    </select>
                </div>
            </HayRegistros>
        </ListadoGenerico>
        <ListadoGenerico listado="tiposListaPrecio">
            <HayRegistros>
                <div class="col-md-12 mx-0 px-0 my-2">
                    <span class="col-md-12 mx-0 px-0">Cantidad de registros a mostrar</span>
                    <select class="col-md-12" @onchange="@(async (ChangeEventArgs e)=> { cantidadDeRegistrosAMostrar = Convert.ToInt32(e.Value.ToString());   })">
                        <option value="10">10</option>
                        <option selected value="25">25</option>
                        <option value="50">50</option>
                        <option value="100">100</option>

                    </select>
                </div>
            </HayRegistros>
        </ListadoGenerico>
        <div class="fechaPedido col-md-12 row mx-0 px-0 border-top">
            <h6 class="col-md-12 mx-0 px-0 my-2">Fecha Pedido <input type="checkbox" /></h6>
            <div class="col-md-6 ml-0 pl-0">

                <div class="col-md-12 row mx-0 px-0">
                    <span>Desde</span>
                </div>

                <input class="col-md-12 row mx-0 px-0" type="date" />
            </div>

            <div class="col-md-6 ">
                <div class="col-md-12 row mx-0 px-0">
                    <span>Hasta</span>
                </div>
                <input class="col-md-12 row mx-0 px-0" type="date" />
            </div>
        </div>


        <div class="fechaEntrega col-md-12 row mx-0 px-0 my-2 border-top">
            <h6 class="col-md-12 mx-0 px-0">Fecha Entrega <input type="checkbox" /></h6>

            <div class="col-md-6 ml-0 pl-0">
                <div class="col-md-12 row mx-0 px-0">
                    <span>Desde</span>
                </div>
                <input class="col-md-12 row mx-0 px-0" type="date" />
            </div>
            <div class="col-md-6 ">
                <div class="col-md-12 row mx-0 px-0">
                    <span>Hasta</span>
                </div>
                <input class="col-md-12 row mx-0 px-0" type="date" />
            </div>
        </div>
    </div>
    <div class="btn btn-sm btn-block btn-olive my-4" @onclick="@(async()=> { await ListarPedidos(); await ModalToggle("filtros"); })">Aplicar Filtros</div>
</Modal>
@code {
    public List<Pedido> pedidos { get; set; }
    [Parameter] public int clienteId { get; set; }
    private int paginaActual = 1;
    private int paginasTotales;
    private HttpResponseWrapper<List<Pedido>> responseHttp;
    public List<Vendedor> vendedores { get; set; }
    public List<EstadoPedido> estadosPedido { get; set; }
    public List<TipoListaPrecio> tiposListaPrecio { get; set; }
    [Parameter] public Func<int, Task> selectPedido { get; set; }
    public int estadoPedidoIdFiltro { get; set; }
    public int tipoListaPrecioIdFiltro { get; set; }
    public int cantidadDeRegistrosAMostrar { get; set; } = 10;
    public int registrosTotales { get; set; }




    public async Task ListarPedidos()
    {
        responseHttp = await repositorio.Get<List<Pedido>>($"api/pedido/pedidosCliente?clienteId={clienteId}&pagina={paginaActual}&cantidadDeRegistros={cantidadDeRegistrosAMostrar}&estadoPedidoId={estadoPedidoIdFiltro}&tipoListaPrecioId={tipoListaPrecioIdFiltro}");
        if (!responseHttp.Error)
        {
            pedidos = responseHttp.Response;

            registrosTotales = int.Parse(responseHttp.HttpResponseMessage.Headers.GetValues("conteo").FirstOrDefault());

            paginasTotales = int.Parse(responseHttp.HttpResponseMessage.Headers.GetValues("totalPaginas").FirstOrDefault());

        }

        estadosPedido = pedidos.Select(x => x.EstadoPedido).Where(y => y != null && y.nombre != null && y.Id != 0).Distinct().ToList();

        tiposListaPrecio = pedidos.Select(x => x.ListaPrecios.TipoListaPrecio).Where(y => y != null && y.nombre != null && y.Id != 0).Distinct().ToList();
    }
    private async Task paginaSeleccionada(int pagina)
    {
        pedidos = null;
        paginaActual = pagina;
        await ListarPedidos();
    }

    public async Task ModalToggle(string id)
    {
        await js.InvokeVoidAsync("ModalToggle", id);
    }

    public async Task CambiarEstadoPedido(int pedidoId)
    {

        await http.GetAsync($"api/pedido/CambiarEstadoPedido?pedidoId={pedidoId}&estadoId=3");
        toastService.ShowSuccess("Se cambió el estado correctamente");
    }
    public async Task ToggleModal(string id)
    {
        await js.InvokeAsync<object>("ModalToggle", id);
    }
}

@page "/BackOffice/Compras/ListadoComprobantes"
@inject IRepositorio repositorio
@layout BackOfficeLayout
@attribute [Authorize(Roles = "Admin, Administrativo")]
@inject AuthenticationStateProvider authStateProvider
@inject IRepositorio repositorio
@inject IToastService toastService;
@inject IJSRuntime js
@inject NavigationManager uri
@attribute [Authorize(Roles = "Admin, Compras")]

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item" @onclick="@(()=>uri.NavigateTo("BackOffice/Compras"))">Compras</li>
        <li class="breadcrumb-item active" aria-current="page" @onclick="@(()=>uri.NavigateTo("BackOffice/Compras/ListadoComprobantes"))">Listado Comprobantes</li>
    </ol>
</nav>
<div class="">
    <div class="d-flex justify-content-between">
        <h3>Facturas @(facturas != null ? $"({registrosTotales})": "")</h3>
        <div class="d-flex">
            <div class="btn btn-sm btn-olive mx-2" @onclick='(()=>ModalToggle("filtros"))'><i class="fas fa-filter mr-1"></i>Filtros</div>
            <div class="btn btn-sm btn-olive" @onclick='(()=>uri.NavigateTo("BackOffice/Compras/ComprobanteCompras"))'>Nuevo Comprobante</div>

        </div>
    </div>
    <ListadoGenerico listado="facturas">
        <HayRegistros>
            <div class="facturas my-2">
                <table class="table table-sm d-xs-block" style="overflow-x:auto;">
                    <tr>
                        <th>Fecha</th>

                        <th>Comprobante</th>
                        <th>Proveedor</th>
                        <th>Total</th>
                        <th>Estado</th>
                    </tr>

                    @foreach (FacturaCompras factura in facturas)
                    {

                        <tr class="factura trSeleccionable" @onclick="@(()=>uri.NavigateTo($"/BackOffice/Compras/ComprobanteCompras/{factura.Id}"))">
                            <td class="fecha">@(factura.fecha.ToString("dd/MM HH:mm"))</td>

                            <td class="nombre">@factura.TipoComprobante.nombre @factura.codigo</td>

                            <td class="nombre">@(factura.Proveedor.razonSocial)</td>
                            <td class="total">$@(factura.totalComprobante)</td>
                            <td class="estado"><strong>@(factura.EstadoFactura.nombre)</strong></td>
                        </tr>
                    }
                </table>
                <PaginacionComp PaginaActual="paginaActual"
                                PaginasTotales="paginasTotales"
                                PaginaSeleccionada="paginaSeleccionada">
                </PaginacionComp>
            </div>
        </HayRegistros>

    </ListadoGenerico>
</div>
<Modal modalTitulo="Filtros" modalTamaño="modal-md" modalId="filtros">
    <div class="filtros my-3">




        <ListadoGenerico listado="facturas">
            <HayRegistros>
                <div class="col-md-12 mx-0 px-0 my-2">
                    <span class="col-md-12 mx-0 px-0">Cantidad de registros a mostrar</span>
                    <select class="col-md-12" @onchange="@(async (ChangeEventArgs e)=> { cantidadDeRegistrosAMostrar = Convert.ToInt32(e.Value.ToString());   })">
                        <option value="10">10</option>
                        <option selected value="25">25</option>
                        <option value="50">50</option>
                        <option value="100">100</option>

                    </select>
                </div>
            </HayRegistros>
        </ListadoGenerico>
        <div class="fechaFactura col-md-12 row mx-0 px-0 border-top">
            <h6 class="col-md-12 mx-0 px-0 my-2">Fecha FacturaCompras <input type="checkbox" /></h6>
            <div class="col-md-6 ml-0 pl-0">

                <div class="col-md-12 row mx-0 px-0">
                    <span>Desde</span>
                </div>

                <input class="col-md-12 row mx-0 px-0" type="date" />
            </div>

            <div class="col-md-6 ">
                <div class="col-md-12 row mx-0 px-0">
                    <span>Hasta</span>
                </div>
                <input class="col-md-12 row mx-0 px-0" type="date" />
            </div>
        </div>


        <div class="fechaEntrega col-md-12 row mx-0 px-0 my-2 border-top">
            <h6 class="col-md-12 mx-0 px-0">Fecha Entrega <input type="checkbox" /></h6>

            <div class="col-md-6 ml-0 pl-0">
                <div class="col-md-12 row mx-0 px-0">
                    <span>Desde</span>
                </div>
                <input class="col-md-12 row mx-0 px-0" type="date" />
            </div>
            <div class="col-md-6 ">
                <div class="col-md-12 row mx-0 px-0">
                    <span>Hasta</span>
                </div>
                <input class="col-md-12 row mx-0 px-0" type="date" />
            </div>
        </div>
    </div>
    <div class="btn btn-sm btn-block btn-olive my-4" @onclick="@(async()=> { await ListarFacturas(); await ModalToggle("filtros"); })">Aplicar Filtros</div>
</Modal>
@code {
    public List<FacturaCompras> facturas { get; set; }
    private int paginaActual = 1;
    private int paginasTotales;
    private HttpResponseWrapper<List<FacturaCompras>> responseHttp;
    public List<EstadoFactura> estadosFactura { get; set; }

    public int estadoFacturaIdFiltro { get; set; }
    public int depositoIdFiltro { get; set; }
    public int TipoComprobanteIdFiltro { get; set; }

    public int cantidadDeRegistrosAMostrar { get; set; } = 25;
    public int registrosTotales { get; set; }
    protected override async Task OnInitializedAsync()
    {


        await ListarFacturas();
        estadosFactura = facturas.Select(x => x.EstadoFactura).Where(y => y != null && y.nombre != null && y.Id != 0).Distinct().ToList();


    }

    public async Task ListarFacturas()
    {
        responseHttp = await repositorio.Get<List<FacturaCompras>>($"api/facturaCompra?pagina={paginaActual}&cantidadDeRegistros={cantidadDeRegistrosAMostrar}&estadoFacturaId={estadoFacturaIdFiltro}");
        if (!responseHttp.Error)
        {
            facturas = responseHttp.Response;

            registrosTotales = int.Parse(responseHttp.HttpResponseMessage.Headers.GetValues("conteo").FirstOrDefault());

            paginasTotales = int.Parse(responseHttp.HttpResponseMessage.Headers.GetValues("totalPaginas").FirstOrDefault());

        }


    }
    private async Task paginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        await ListarFacturas();
    }

    public async Task ModalToggle(string id)
    {
        await js.InvokeVoidAsync("ModalToggle", id);
    }
}

@inject HttpClient http
@using System.Net.Http;
@using System.Text;
@using System.Text.Json;
@using SurcosBlazor.Client.Auth
@inject IToastService toastService
@page "/BackOffice/Compras/Proveedor/{Id:int}"
@inject ILoginService loginService
@inject IJSRuntime js
@layout BackOfficeLayout
@inject NavigationManager uri
@attribute [Authorize(Roles = "Admin, Compras")]

<style>
    #map {
        height: 250px;
        background: rgb(200,200,200);
    }

    .proveedorForm {
        border-top: 10px solid #56A4E8;
        padding: 20px 20px 0px 20px;
    }
</style>
<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item" @onclick="@(()=>uri.NavigateTo("BackOffice/Compras"))">Compras</li>
        <li class="breadcrumb-item" aria-current="page" @onclick="@(()=>uri.NavigateTo("BackOffice/Compras/ListadoProveedores"))">Listado Proveedores</li>
        <li class="breadcrumb-item active" aria-current="page" @onclick="@(()=>uri.NavigateTo($"BackOffice/Compras/Proveedor/{Id}"))">Detalle Proveedor</li>

    </ol>
</nav>

<h2>Proveedor</h2>
@if (proveedor != null)
{<div class="proveedorForm">
        <EditForm Model="proveedor" OnValidSubmit="Confimar">
            <Blazored.FluentValidation.FluentValidationValidator />
            @if (error)
            {

                <div class="my-3"><strong class="text-danger">@errorMessage</strong></div>
            }
            <div class="col-md-12 row mx-0 px-0">
                @if (proveedor.Id != 0)
                {
                <div class="col-md-12 d-flex justify-content-end ">
                    <div class="col-md-2 btn btn-sm btn-outline-info" @onclick="@(()=>ToggleModal("resumenCuenta"))">Resumen de cuenta</div>
                    <div class="col-md-2 btn btn-sm btn-outline-danger" @onclick="@(()=>ToggleModal("eliminarConfirm"))">Eliminar</div>
                </div>
                    
                }
                <fieldset class="col-md-6">
                    <legend>Datos Proveedor</legend>
                    <div>

                        <div class="mt-2">
                            <InputMaterialize requerido="true" label="Razon Social" @bind-Value="@proveedor.razonSocial" class="col-md-12" />
                            <ValidationMessage For="(() => proveedor.razonSocial)"></ValidationMessage>
                        </div>
                        <div class="mt-2">
                            <InputMaterialize label="Nombre Comercial" @bind-Value="@proveedor.nombreComercial" class="col-md-12" />

                            <ValidationMessage For="(() => proveedor.nombreComercial)"></ValidationMessage>

                        </div>
                        <div class="mt-2">
                            <InputMaterialize requerido="true" label="Cuit" @bind-Value="@proveedor.cuit" class="col-md-12" />

                            <ValidationMessage For="(() => proveedor.cuit)"></ValidationMessage>

                        </div>
                        <div class="mt-2">
                            <InputMaterialize label="Celular" @bind-Value="@proveedor.celular" class="col-md-12" />

                            <ValidationMessage For="(() => proveedor.celular)"></ValidationMessage>

                        </div>

                    </div>
                </fieldset>


                @*DIRECCION*@
                <fieldset class="col-md-12 mx-0 px-0 row mt-2">
                    <legend>
                        Direccion de Entrega
                    </legend>

                    <div class="col-md-12 row mx-0 px-0 mt-1">
                        <div class="col-md-6">
                            <div class="col-md-12 row px-0">
                                <div class="nav-item dropdown mt-2 col-md-5 offset-md-1 ml-0">

                                    <SelectGenerico TList="provincias"
                                                    TItemActual="proveedor.Domicilio?.Provincia"
                                                    Label="Provincia"
                                                    T="Provincia"
                                                    Context="provincia" SelectItem="@(async(Provincia provincia)=> { await ChangeProvincia(provincia); })">
                                        <TTemplate>
                                            @provincia.nombre
                                        </TTemplate>
                                    </SelectGenerico>
                                    <ValidationMessage For="(() => proveedor.Domicilio.Provincia)"></ValidationMessage>

                                </div>

                                <div class="nav-item dropdown mt-2 col-md-6 mx-0 ">
                                    <SelectGenerico TList="departamentos"
                                                    TItemActual="proveedor.Domicilio.Departamento"
                                                    Label="Departamento"
                                                    T="Departamento"
                                                    Context="departamento" SelectItem="@((Departamento departamento)=> { ChangeDepartamento(departamento); })">
                                        <TTemplate>
                                            @departamento.nombre
                                        </TTemplate>
                                    </SelectGenerico>
                                    <ValidationMessage For="(() => proveedor.Domicilio.Departamento)"></ValidationMessage>

                                </div>
                            </div>
                            <div class="col-md-12 row px-0">
                                <div class="col-md-9 mt-2 pl-0">
                                    <InputMaterialize requerido="true" label="Calle" @bind-Value="@proveedor.Domicilio.calle" class="col-md-12" @onblur="@ActualizarMapa" />
                                    <ValidationMessage For="(() => proveedor.Domicilio.calle)"></ValidationMessage>

                                </div>
                                <div class="col-md-3 mt-2 px-0">
                                    <InputMaterialize requerido="true" label="Numero" @bind-Value="@proveedor.Domicilio.numero" class="col-md-12" @onblur="@ActualizarMapa" />
                                    <ValidationMessage For="(() => proveedor.Domicilio.numero)"></ValidationMessage>

                                </div>
                            </div>

                            <div class="mt-2 col-md-12 row px-0">
                                <InputMaterialize label="Piso" @bind-Value="@proveedor.Domicilio.piso" class="col-md-12" @onblur="@ActualizarMapa" />
                                <ValidationMessage For="(() => proveedor.Domicilio.piso)"></ValidationMessage>

                            </div>
                            <div class="mt-2  col-md-12 row px-0">
                                <InputMaterialize label="Manzana" @bind-Value="@proveedor.Domicilio.manzana" class="col-md-12" @onblur="@ActualizarMapa" />
                                <ValidationMessage For="(() => proveedor.Domicilio.manzana)"></ValidationMessage>

                            </div>
                        </div>
                        <div id="map" class="col-md-6 my-2"></div>

                    </div>
                </fieldset>
            </div>
            <button type="submit" class="btn btn-sm btn-block btn-info my-3 col-md-12 mx-0 px-0">@(proveedor.Id == 0 ? "Crear" : "Editar")</button>
        </EditForm>
        <Modal modalId="resumenCuenta" modalTamaño="modal-lg" modalTitulo="Resumen de cuentas">
            <table class="table table-sm">
                <tr>
                    <th>FECHA</th>
                    <th>COMPROBANTE</th>
                    <th>ESTADO</th>

                    <th>DEBE</th>
                    <th>HABER</th>
                    <th>SALDO</th>

                </tr>
                @if (Id != 0)
                {
                    decimal saldo = proveedor.saldoCC;
                    decimal anterior = 0.00M;
                    int aux = 0;
                    @foreach (Comprobante comprobante in comprobantes)
                    {
                        string tipoComprobante = comprobante.GetType().Name;

                        if (aux != 0)
                        {
                            saldo += anterior;
                        }
                        aux++;
                        if (tipoComprobante == "FacturaCompras")
                        {
                            anterior = ((FacturaCompras)comprobante).TipoComprobante.nombre == "NC" ? -1 * comprobante.totalComprobante : 1 * comprobante.totalComprobante;

                        }
                        else if (tipoComprobante == "OrdenPago")
                        {
                            anterior = -1 * comprobante.totalComprobante;

                        }
                        <tr>
                            <td>@comprobante.fecha.ToString("dd/MM/yyyy hh:MM")</td>
                            @if (tipoComprobante == "FacturaCompras")
                            {
                                <td>
                                    <a @onclick='@(()=>ToggleModal("resumenCuenta"))' href="@($"/BackOffice/Compras/FacturaCompras/{comprobante.Id}")">
                                        @($"{((FacturaCompras)comprobante).TipoComprobante.nombre} {((FacturaCompras)comprobante).codigo}")
                                    </a>
                                </td>
                                <th>@(((FacturaCompras)comprobante).EstadoFactura.nombre)</th>

                                <td>@(((FacturaCompras)comprobante).TipoComprobante.nombre != "NC" ? $"${comprobante.totalComprobante.ToString()}" : "")</td>
                                <td>@(((FacturaCompras)comprobante).TipoComprobante.nombre == "NC" ? $"${comprobante.totalComprobante.ToString()}" : "")</td>
                            }
                            else
                            {

                                <td>

                                    <a @onclick='@(()=>ToggleModal("resumenCuenta"))' href="@($"/BackOffice/Tesoreria/DetalleOrdenPago/{comprobante.Id}")">
                                        @($"OP #{((OrdenPago)comprobante).Id}" )
                                    </a>
                                </td>
                                <td>@(((OrdenPago)comprobante).EstadoRecibo.nombre)</td>

                                <td></td>
                                <td>@($"{comprobante.totalComprobante}")</td>

                            }
                            <td>$ @saldo</td>
                        </tr>
                    }
                }
            </table>
        </Modal>
    <ModalConfirm modalId="eliminarConfirm" confirmFunc="@(async () => { ToggleModal("eliminarConfirm"); await EliminarProveedor(); })"></ModalConfirm>
    </div>
    
}
@code {
    [Parameter]
    public int Id { get; set; }
    public List<Provincia> provincias { get; set; } = new List<Provincia>();
    public List<Departamento> departamentos { get; set; } = new List<Departamento>();
    public bool error { get; set; } = false;
    public string errorMessage { get; set; }
    public Proveedor proveedor { get; set; }
    public List<Comprobante> comprobantes { get; set; } = new List<Comprobante>();
    [Parameter] public EventCallback callback { get; set; }

    public async Task Confimar()
    {

        proveedor.Domicilio.Provincia = null;
        proveedor.Domicilio.Departamento = null;
        var enviarJSON = JsonSerializer.Serialize(proveedor);
        var enviarContent = new StringContent(enviarJSON, Encoding.UTF8, "application/json");
        HttpResponseMessage result;
        if (proveedor.Id == 0)
        {

            result = await http.PostAsync("api/Proveedor", enviarContent);
            if (!result.IsSuccessStatusCode)
            {
                error = true;
                errorMessage = await result.Content.ReadAsStringAsync();
                errorMessage = errorMessage.Count() > 50 ? "Ocurrió un error" : errorMessage;
            }
            else
            {
                uri.NavigateTo("/BackOffice/Compras/ListadoProveedores");

            }
        }
        else
        {

            result = await http.PutAsync($"api/Proveedor/{proveedor.Id}", enviarContent);
            if (!result.IsSuccessStatusCode)
            {
                error = true;
                errorMessage = await result.Content.ReadAsStringAsync();
                errorMessage = errorMessage.Count() > 50 ? "Ocurrió un error" : errorMessage;
            }
            else
            {
                uri.NavigateTo("/BackOffice/Compras/ListadoProveedores");
            }

        }



    }

    protected override async Task OnParametersSetAsync()
    {
        @if (Id != 0)
        {
            proveedor = await http.GetJsonAsync<Proveedor>($"api/Proveedor/{Id}");
            @if (proveedor.Domicilio.Provincia != null)
            {
                departamentos = await http.GetJsonAsync<List<Departamento>>($"api/departamento?ProvinciaId={proveedor.Domicilio.ProvinciaId}&cantidadDeRegistros=25");
            }
            await listarFacturasProveedores();
            await ActualizarMapa();

        }
        else
        {
            proveedor = new Proveedor();
        }
    }
    protected override async Task OnInitializedAsync()
    {
        provincias = await http.GetJsonAsync<List<Provincia>>("api/provincia?cantidadDeRegistros=25");

        provincias = provincias.Where(x => x.eCommerce == true).ToList();
    }
    private async Task<UserInfo> DeserializarRespuesta<UserProveedorInfo>(HttpResponseMessage httpResponse, JsonSerializerOptions jsonSerializerOptions)
    {
        var responseString = await httpResponse.Content.ReadAsStringAsync();
        return JsonSerializer.Deserialize<UserInfo>(responseString, jsonSerializerOptions);
    }

    public async Task ChangeProvincia(Provincia provincia)
    {
        departamentos = await http.GetJsonAsync<List<Departamento>>($"api/departamento?ProvinciaId={provincia.Id}&cantidadDeRegistros=25");
        proveedor.Domicilio.Provincia = provincia;
        proveedor.Domicilio.ProvinciaId = provincia.Id;
        proveedor.Domicilio.Departamento = null;
        proveedor.Domicilio.DepartamentoId = 0;


    }
    public async Task Eliminar()
    {
        await http.DeleteAsync($"api/Proveedor/{proveedor.Id}");
        uri.NavigateTo("/BackOffice/Compras/ListadoProveedores");

    }
    public void ChangeDepartamento(Departamento departamento)
    {
        proveedor.Domicilio.Departamento = departamento;
        proveedor.Domicilio.DepartamentoId = departamento.Id;

    }


    public async Task ActualizarMapa()
    {
        if (proveedor.Domicilio.numero != 0 && !string.IsNullOrWhiteSpace(proveedor.Domicilio.calle) && proveedor.Domicilio.Provincia != null && proveedor.Domicilio.Departamento != null && !string.IsNullOrWhiteSpace(proveedor.Domicilio.Departamento.nombre) && !string.IsNullOrWhiteSpace(proveedor.Domicilio.Provincia.nombre))
        {
            List<decimal> coords = await js.InvokeAsync<List<decimal>>("buscarCoordenadas", $"{proveedor.Domicilio.numero}+{proveedor.Domicilio.calle}+{proveedor.Domicilio.Departamento.nombre}+{proveedor.Domicilio.Provincia.nombre}+Argentina", "map");
            proveedor.Domicilio.latitud = coords[0];
            proveedor.Domicilio.longitud = coords[1];

        }
        else
        {
            Console.WriteLine(proveedor.Domicilio.calle);
            Console.WriteLine("No estan todos los campos completos");
        }



    }
    public async Task listarFacturasProveedores()
    {
        if (Id != 0)
        {

            comprobantes.AddRange(await http.GetJsonAsync<List<FacturaCompras>>($"api/facturaCompra/facturasPorProveedor?proveedorId={Id}"));
            comprobantes.AddRange(await http.GetJsonAsync<List<OrdenPago>>($"api/ordenPago/OrdenesDePagoProveedor?proveedorId={Id}"));
            comprobantes = comprobantes.OrderByDescending(x => x.fecha).ToList();

        }
    }
    public async Task ToggleModal(string id)
    {

        await js.InvokeAsync<object>("ModalToggle", id);
    }

    public async Task EliminarProveedor() {
        
        await http.DeleteAsync($"api/proveedor/{proveedor.Id}");
        uri.NavigateTo("/BackOffice/Compras/ListadoProveedores");

    }
}

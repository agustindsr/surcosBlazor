@page "/BackOffice/Compras/ListadoProveedores"
@inject IRepositorio repositorio
@layout BackOfficeLayout
@attribute [Authorize(Roles = "Admin, Administrativo")]
@inject AuthenticationStateProvider authStateProvider
@inject IRepositorio repositorio
@inject IToastService toastService;
@inject IJSRuntime js
@inject NavigationManager uri
@attribute [Authorize(Roles = "Admin, Compras")]

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item" @onclick="@(()=>uri.NavigateTo("BackOffice/Compras"))">Compras</li>
        <li class="breadcrumb-item active" aria-current="page" @onclick="@(()=>uri.NavigateTo("BackOffice/Compras/ListadoProveedores"))">Listado Proveedores</li>
    </ol>
</nav>
<div class="listadoProveedores">
    <div class="d-flex justify-content-between">
        <h3>Proveedores @(proveedores != null ? $"({registrosTotales})": "")</h3>
        <div class="d-flex">
            <div class="btn btn-sm btn-olive mx-2" @onclick='(()=>ModalToggle("filtros"))'><i class="fas fa-filter mr-1"></i>Filtros</div>
            <div class="btn btn-sm btn-olive" @onclick="@(()=>uri.NavigateTo($"/BackOffice/Compras/Proveedor/0"))">Nuevo Proveedor</div>

        </div>
    </div>
    <ListadoGenerico listado="proveedores">
        <HayRegistros>
            <table class="table table-sm my-2">
                <tr class="tituloTablaProveedor">

                    <th>Nombre</th>
                    <th>Localidad</th>
                    <th>Numero</th>
                    <th>Saldo</th>


                </tr>
                @foreach (Proveedor proveedor in proveedores)
                {

                    <tr class="proveedor trSeleccionable" @onclick="@(()=>uri.NavigateTo($"/BackOffice/Compras/Proveedor/{proveedor.Id}"))">
                        <td class="nombre">@(proveedor.razonSocial)</td>

                        <td class="localidad">@($"{proveedor.Domicilio?.Provincia?.nombre}, {proveedor.Domicilio?.Departamento?.nombre}")</td>
                        <td class="numero">@(proveedor.celular)</td>

                        <td class="saldo"><strong>$@(proveedor.saldoCC)</strong></td>
                    </tr>
                }

            </table>
            <div>
                <PaginacionComp PaginaActual="paginaActual"
                                PaginasTotales="paginasTotales"
                                PaginaSeleccionada="paginaSeleccionada">

                </PaginacionComp>
            </div>
        </HayRegistros>

    </ListadoGenerico>
</div>
<Modal modalTitulo="Filtros" modalTamaño="modal-md" modalId="filtros">
    <div class="filtros my-3">

        <ListadoGenerico listado="departamentos">
            <HayRegistros>
                <div class="col-md-12 mx-0 px-0 my-2">
                    <span class="col-md-12 mx-0 px-0">Departamento</span>
                    <select class="col-md-12" @onchange="@(async (ChangeEventArgs e)=> { departamentoIdFiltro = Convert.ToInt32(e.Value.ToString());  })">
                        <option value="0">Todos</option>
                        @foreach (Departamento departamento in departamentos)
                        {
                            <option value="@departamento.Id">@departamento.nombre</option>
                        }
                    </select>
                </div>
            </HayRegistros>
        </ListadoGenerico>

        <ListadoGenerico listado="provincias">
            <HayRegistros>
                <div class="col-md-12 mx-0 px-0 my-2">
                    <span class="col-md-12 mx-0 px-0">Provincia</span>
                    <select class="col-md-12" @onchange="@(async (ChangeEventArgs e)=> { provinciaIdFiltro = Convert.ToInt32(e.Value.ToString());  })">
                        <option value="0">Todas</option>
                        @foreach (Provincia provincia in provincias)
                        {
                            <option value="@provincia.Id">@provincia.nombre</option>
                        }
                    </select>
                </div>
            </HayRegistros>
        </ListadoGenerico>


    </div>
    <div class="btn btn-sm btn-block btn-olive my-4" @onclick="@(async()=> { await ListarProveedores(); await ModalToggle("filtros"); })">Aplicar Filtros</div>
</Modal>
@code {
    public List<Proveedor> proveedores { get; set; }
    private int paginaActual = 1;
    private int paginasTotales;
    private HttpResponseWrapper<List<Proveedor>> responseHttp;
    public List<Provincia> provincias { get; set; }
    public List<Departamento> departamentos { get; set; }

    public string userName { get; set; }
    public int provinciaIdFiltro { get; set; }
    public int departamentoIdFiltro { get; set; }

    public int cantidadDeRegistrosAMostrar { get; set; } = 25;
    public int registrosTotales { get; set; }

    protected override async Task OnInitializedAsync()
    {

        var authState = await authStateProvider.GetAuthenticationStateAsync();
        userName = authState.User.Identity.Name;
        await ListarProveedores();
        provincias = proveedores.Select(x => x.Domicilio.Provincia).Where(y => y != null && y.nombre != null && y.Id != 0).Distinct().ToList();

        departamentos = proveedores.Select(x => x.Domicilio.Departamento).Where(y => y != null && y.nombre != null && y.Id != 0).Distinct().ToList();

    }

    public async Task ListarProveedores()
    {
        responseHttp = await repositorio.Get<List<Proveedor>>($"api/proveedor?pagina={paginaActual}&cantidadDeRegistros={cantidadDeRegistrosAMostrar}&userName={userName}&provinciaId={provinciaIdFiltro}&departamentoId={departamentoIdFiltro}");
        if (!responseHttp.Error)
        {
            proveedores = responseHttp.Response;

            registrosTotales = int.Parse(responseHttp.HttpResponseMessage.Headers.GetValues("conteo").FirstOrDefault());

            paginasTotales = int.Parse(responseHttp.HttpResponseMessage.Headers.GetValues("totalPaginas").FirstOrDefault());

        }


    }
    private async Task paginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        await ListarProveedores();
    }

    public async Task ModalToggle(string id)
    {
        await js.InvokeVoidAsync("ModalToggle", id);
    }
}

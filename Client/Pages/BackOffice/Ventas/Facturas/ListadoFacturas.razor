@page "/BackOffice/Ventas/ListadoComprobantes"
@inject IRepositorio repositorio
@layout BackOfficeLayout
@attribute [Authorize(Roles = "Admin, Ventas")]
@inject AuthenticationStateProvider authStateProvider
@inject IRepositorio repositorio
@inject IToastService toastService;
@inject IJSRuntime js
@inject NavigationManager uri
<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item" @onclick="@(()=>uri.NavigateTo("BackOffice/Ventas"))">Ventas</li>
        <li class="breadcrumb-item active" aria-current="page" @onclick="@(()=>uri.NavigateTo("BackOffice/Ventas/ListadoComprobantes"))">Listado Comprobantes</li>
    </ol>
</nav>
<div class="listadoFacturas">
    <div class="d-flex justify-content-between">
        <h3>Comprobantes @(facturas != null ? $"({registrosTotales})": "")</h3>
        <div class="d-flex">
            <AuthorizeView Roles="Admin" Context="listado">
                <Authorized>
                    <span>Modo Admin</span><input type="checkbox" @bind="this.modoAdmin" />

                </Authorized>
            </AuthorizeView>
            <div class="btn btn-sm btn-olive mx-2" @onclick='(()=>ModalToggle("filtros"))'><i class="fas fa-filter mr-1"></i>Filtros</div>
            <div class="btn btn-sm btn-olive" @onclick='(()=>uri.NavigateTo("BackOffice/Ventas/Comprobante"))'>Nuevo Comprobante</div>

        </div>
    </div>
    <ListadoGenerico listado="facturas">
        <HayRegistros>
            <div class="facturas my-2">
                <table class="table table-sm d-xs-block" style="overflow-x:auto;">
                    <tr>
                        <th>Comprobante</th>
                        <th>Nombre</th>
                        <th>Fecha</th>
                        <th>Entrega</th>
                        <th>Localidad</th>
                        <th>Vendedor</th>
                        <th>Lista</th>
                        <th>Total</th>
                        @if (modoAdmin)
                        {
                            <th>Ganancia</th>

                        }
                        <th>Estado</th>
                    </tr>

                    @foreach (Factura factura in facturas)
                    {

                        <tr class="factura trSeleccionable" @onclick="@(()=>uri.NavigateTo($"/BackOffice/Ventas/Comprobante/{factura.Id}"))">
                            <td class="nombre">@factura.TipoComprobante.nombre @factura.codigo</td>

                            <td class="nombre">@(factura.nombreCliente)</td>
                            <td class="fecha">@(factura.fecha.ToString("dd/MM HH:mm"))</td>
                            <td class="fechaEntrega">@(factura.fechaEntrega.ToString("dd/MM"))</td>
                            <td class="localidad">@($"{factura.Domicilio?.Provincia?.nombre}, {factura.Domicilio?.Departamento?.nombre}")</td>
                            <td class="vendedor"><img src="@factura.Vendedor.Foto" style="width:25px; height:25px; border-radius:50%;" />@(factura.Vendedor.nombre)</td>
                            <td class="lista">@(factura.ListaPrecios.TipoListaPrecio.nombre)</td>
                            <td class="total">$@(factura.totalComprobante)</td>
                            @if (modoAdmin)
                            {
                                <td>$@(factura.totalComprobante - factura.costoTotal)</td>

                            }
                            <td class="estado"><strong>@(factura.EstadoFactura.nombre)</strong></td>
                        </tr>
                    }
                </table>
                <PaginacionComp PaginaActual="paginaActual"
                                PaginasTotales="paginasTotales"
                                PaginaSeleccionada="paginaSeleccionada">
                </PaginacionComp>
            </div>
        </HayRegistros>

    </ListadoGenerico>
</div>
<Modal modalTitulo="Filtros" modalTamaño="modal-md" modalId="filtros">
    <div class="filtros my-3">

        <ListadoGenerico listado="vendedores">
            <HayRegistros>
                <div class="col-md-12 mx-0 px-0 my-2">
                    <span class="col-md-12 mx-0 px-0">Vendedores</span>
                    <select class="col-md-12" @onchange="@(async (ChangeEventArgs e)=> { vendedorIdFiltro = Convert.ToInt32(e.Value.ToString());  })">
                        <option value="0">Todos</option>
                        @foreach (Vendedor vendedor in vendedores)
                        {
                            <option value="@vendedor.Id">@vendedor.nombre</option>
                        }
                    </select>
                </div>
            </HayRegistros>
        </ListadoGenerico>

        <ListadoGenerico listado="provincias">
            <HayRegistros>
                <div class="col-md-12 mx-0 px-0 my-2">
                    <span class="col-md-12 mx-0 px-0">Provincia</span>
                    <select class="col-md-12" @onchange="@(async (ChangeEventArgs e)=> { provinciaIdFiltro = Convert.ToInt32(e.Value.ToString());  })">
                        <option value="0">Todas</option>
                        @foreach (Provincia provincia in provincias)
                        {
                            <option value="@provincia.Id">@provincia.nombre</option>
                        }
                    </select>
                </div>
            </HayRegistros>
        </ListadoGenerico>
        <ListadoGenerico listado="tiposListaPrecio">
            <HayRegistros>
                <div class="col-md-12 mx-0 px-0 my-2">
                    <span class="col-md-12 mx-0 px-0">Lista de precios</span>
                    <select class="col-md-12" @onchange="@(async (ChangeEventArgs e)=> { tipoListaPrecioIdFiltro = Convert.ToInt32(e.Value.ToString());   })">
                        <option value="0">Todas</option>
                        @foreach (TipoListaPrecio tipo in tiposListaPrecio)
                        {
                            <option value="@tipo.Id">@tipo.nombre</option>
                        }
                    </select>
                </div>
            </HayRegistros>
        </ListadoGenerico>
        <ListadoGenerico listado="tiposListaPrecio">
            <HayRegistros>
                <div class="col-md-12 mx-0 px-0 my-2">
                    <span class="col-md-12 mx-0 px-0">Estado Factura</span>
                    <select class="col-md-12" @onchange="@(async (ChangeEventArgs e)=> { estadoFacturaIdFiltro = Convert.ToInt32(e.Value.ToString());  })">
                        <option value="0">Todas</option>
                        @foreach (EstadoFactura estado in estadosFactura)
                        {
                            <option value="@estado.Id">@estado.nombre</option>
                        }
                    </select>
                </div>
            </HayRegistros>
        </ListadoGenerico>
        <ListadoGenerico listado="tiposListaPrecio">
            <HayRegistros>
                <div class="col-md-12 mx-0 px-0 my-2">
                    <span class="col-md-12 mx-0 px-0">Cantidad de registros a mostrar</span>
                    <select class="col-md-12" @onchange="@(async (ChangeEventArgs e)=> { cantidadDeRegistrosAMostrar = Convert.ToInt32(e.Value.ToString());   })">
                        <option value="10">10</option>
                        <option selected value="25">25</option>
                        <option value="50">50</option>
                        <option value="100">100</option>

                    </select>
                </div>
            </HayRegistros>
        </ListadoGenerico>
        <div class="fechaFactura col-md-12 row mx-0 px-0 border-top">
            <h6 class="col-md-12 mx-0 px-0 my-2">Fecha Factura <input type="checkbox" /></h6>
            <div class="col-md-6 ml-0 pl-0">

                <div class="col-md-12 row mx-0 px-0">
                    <span>Desde</span>
                </div>

                <input class="col-md-12 row mx-0 px-0" type="date" />
            </div>

            <div class="col-md-6 ">
                <div class="col-md-12 row mx-0 px-0">
                    <span>Hasta</span>
                </div>
                <input class="col-md-12 row mx-0 px-0" type="date" />
            </div>
        </div>


        <div class="fechaEntrega col-md-12 row mx-0 px-0 my-2 border-top">
            <h6 class="col-md-12 mx-0 px-0">Fecha Entrega <input type="checkbox" /></h6>

            <div class="col-md-6 ml-0 pl-0">
                <div class="col-md-12 row mx-0 px-0">
                    <span>Desde</span>
                </div>
                <input class="col-md-12 row mx-0 px-0" type="date" />
            </div>
            <div class="col-md-6 ">
                <div class="col-md-12 row mx-0 px-0">
                    <span>Hasta</span>
                </div>
                <input class="col-md-12 row mx-0 px-0" type="date" />
            </div>
        </div>
    </div>
    <div class="btn btn-sm btn-block btn-olive my-4" @onclick="@(async()=> { await ListarFacturas(); await ModalToggle("filtros"); })">Aplicar Filtros</div>
</Modal>
@code {
    public List<Factura> facturas { get; set; }
    private int paginaActual = 1;
    private int paginasTotales;
    private HttpResponseWrapper<List<Factura>> responseHttp;
    public List<Vendedor> vendedores { get; set; }
    public List<Provincia> provincias { get; set; }
    public List<EstadoFactura> estadosFactura { get; set; }
    public List<TipoListaPrecio> tiposListaPrecio { get; set; }

    public string userName { get; set; }
    public int vendedorIdFiltro { get; set; }
    public int provinciaIdFiltro { get; set; }
    public int estadoFacturaIdFiltro { get; set; }
    public int depositoIdFiltro { get; set; }
    public int TipoComprobanteIdFiltro { get; set; }
    public bool modoAdmin { get; set; }
    public int tipoListaPrecioIdFiltro { get; set; }
    public int cantidadDeRegistrosAMostrar { get; set; } = 25;
    public int registrosTotales { get; set; }
    protected override async Task OnInitializedAsync()
    {

        var authState = await authStateProvider.GetAuthenticationStateAsync();
        userName = authState.User.Identity.Name;
        await ListarFacturas();
        await ListarVendedores();
        provincias = facturas.Select(x => x.Domicilio.Provincia).Where(y => y != null && y.nombre != null && y.Id != 0).Distinct().ToList();
        estadosFactura = facturas.Select(x => x.EstadoFactura).Where(y => y != null && y.nombre != null && y.Id != 0).Distinct().ToList();

        tiposListaPrecio = facturas.Select(x => x.ListaPrecios.TipoListaPrecio).Where(y => y != null && y.nombre != null && y.Id != 0).Distinct().ToList();

    }
    public async Task ListarVendedores()
    {
        var respuesta = await repositorio.Get<List<Vendedor>>($"api/factura/vendedoresHabilitados?userName={userName}");
        if (!respuesta.Error)
        {
            vendedores = respuesta.Response;
        }
        else
        {
            toastService.ShowError(await respuesta.HttpResponseMessage.Content.ReadAsStringAsync());
        }
    }
    public async Task ListarFacturas()
    {
        responseHttp = await repositorio.Get<List<Factura>>($"api/factura?pagina={paginaActual}&cantidadDeRegistros={cantidadDeRegistrosAMostrar}&userName={userName}&vendedorId={vendedorIdFiltro}&provinciaId={provinciaIdFiltro}&estadoFacturaId={estadoFacturaIdFiltro}&tipoListaPrecioId={tipoListaPrecioIdFiltro}");
        if (!responseHttp.Error)
        {
            facturas = responseHttp.Response;

            registrosTotales = int.Parse(responseHttp.HttpResponseMessage.Headers.GetValues("conteo").FirstOrDefault());

            paginasTotales = int.Parse(responseHttp.HttpResponseMessage.Headers.GetValues("totalPaginas").FirstOrDefault());

        }


    }
    private async Task paginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        await ListarFacturas();
    }

    public async Task ModalToggle(string id)
    {
        await js.InvokeVoidAsync("ModalToggle", id);
    }
}

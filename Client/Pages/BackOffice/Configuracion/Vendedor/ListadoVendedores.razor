@layout BackOfficeLayout
@page "/BackOffice/Configuraciones/ListadoVendedores"
@inject HttpClient http
@attribute [Authorize(Roles = "Admin, Configuracion")]

@inject NavigationManager uri
@inject IJSRuntime js
@using SurcosBlazor.Client.Repositorio
@inject IRepositorio  repositorio

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item" @onclick="@(()=>uri.NavigateTo("/BackOffice/Configuraciones"))">Configuraciones</li>
        <li class="breadcrumb-item active" aria-current="page" @onclick="@(()=>uri.NavigateTo("/BackOffice/Configuraciones/ListadoVendedores"))">Listado Vendedores</li>
    </ol>
</nav>
<div>
    <div class="border-bottom border-secondary my-2">
        <h2 class="">Vendedores</h2>
    </div>
    <BotoneraAcciones Context="vendedor"
                      Titem="vendedor"
                      agregar="true" tamañoModal="modal-lg">
        <modalContentAgregar>
            <VendedorForm accion="Crear" vendedor="new Vendedor()" callback="(async () => { await tablaGenerica.ListarItemsApi(); })"></VendedorForm>
        </modalContentAgregar>


    </BotoneraAcciones>


    <TablaGenerica @ref="tablaGenerica"
                   elementosAmostrar='new List<string[]> { new string[3]{"Id", "Id","Texto" },new string[3]{ "Foto","Foto","Imagen" },new string[3]{ "Nombre","nombre","Text"},new string[3]{ "Clasificación","clasificacion","Text"}}'
                   consultaApi='new TablaGenerica<Vendedor>.ConsultarApi {  consultaApi= true, baseUrl= "api/vendedor?", paginacion=true, cantidadDeRegistrosAMostrar=10}'
                   acciones="true"
                   detalle="true"
                   selectTitem="((Vendedor vendedor)=>ElementoSeleccionado(vendedor))"
                   detalleUrl="BackOffice/Configuraciones/Vendedor"
                   eliminar="true"
                   eliminarFunc="(async ()=> { await EliminarVendedor(vendedor); this.StateHasChanged(); })">
                    
    </TablaGenerica>

</div>


@code {

    public List<Vendedor> vendedors { get; set; }
    public Vendedor vendedor { get; set; }
    public TablaGenerica<Vendedor> tablaGenerica;



    public async Task EliminarVendedor(Vendedor vendedor)
    {
        await repositorio.Delete($"api/vendedor/{vendedor.Id}");
        this.StateHasChanged();
    }


    public Vendedor ElementoSeleccionado(Vendedor vendedor)
    {
        this.vendedor = vendedor;
        this.StateHasChanged();
        return vendedor;
    }

}
@layout BackOfficeLayout
@attribute [Authorize(Roles = "Admin, Configuracion")]

@page "/BackOffice/Configuraciones/Provincia/{Id:int}"
@inject HttpClient http
@inject NavigationManager uri
@inject IJSRuntime js
@using SurcosBlazor.Client.Repositorio
@inject IRepositorio  repositorio


<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item" @onclick="@(() => uri.NavigateTo("/BackOffice/Configuraciones"))">Configuraciones</li>
        <li class="breadcrumb-item" @onclick="@(() => uri.NavigateTo("/BackOffice/Configuraciones/ListadoProvincias"))">Provincias</li>

        <li class="breadcrumb-item active" aria-current="page" @onclick="@(() => uri.NavigateTo($"/BackOffice/Configuraciones/Provincia/{Id}"))">Detalle Provincia</li>
    </ol>
</nav>

<div class="border-bottom border-secondary my-2">
    <h2 class="">Provincia</h2>
</div>

<BotoneraAcciones Context="provinciaContext"
                  Titem="provincia"
                  SearchMethod="@BuscarProvincias"
                  ElementoSeleccionado="((provincia) => ElementoSeleccionado(provincia))"
                  editar="true"
                  eliminar="true" eliminarFunc='(async () => { EliminarProvincia(provincia); uri.NavigateTo("Configuraciones/ListadoProvincias"); })'>
    <modalContentEditar>
        <ProvinciaForm accion="Editar" provincia="provincia" callback="@(async () => { await ListarProvincia();  })"></ProvinciaForm>
    </modalContentEditar>

    <MyResultTemplate>
        @provincia.nombre
    </MyResultTemplate>
</BotoneraAcciones>


<div class="departamentos mt-4">
    @if (provincia == null)
    {
        <h2> <strong>No se ha encontrado la provincia</strong></h2>
    }
    else
    {

        <div class="detalleEntidad my-4 bg-light p-4">
            <div>
                <h4><strong>Id: </strong><span class="">@provincia.Id</span></h4>
            </div>
            <div>
                <h4> <strong>Nombre: </strong><span class="">@provincia.nombre</span></h4>
            </div>
            <div class="d-flex">
                <h4> <strong>Habilitada para E-Commerce: </strong></h4><input type="checkbox" @bind="@provincia.eCommerce" disabled class="">@(provincia.eCommerce? "On":"Off")
            </div>
        </div>

        //DEPARTAMENTOS
        <div class="border-bottom border-secondary my-2">
            <h3 class="">Departamentos</h3>
        </div>
        <BotoneraAcciones Context="provinciaContext"
                          Titem="departamento"
                          agregar="true">

            <modalContentAgregar>
                <DepartamentoForm departamento="new Departamento()" provincia="provincia" accion="Crear" callback="(async()=> { this.StateHasChanged(); await tablaGenerica.ListarItemsApi(); })"></DepartamentoForm>
            </modalContentAgregar>
        </BotoneraAcciones>


        <TablaGenerica @ref="tablaGenerica"
                       elementosAmostrar='new List<string[]> { new string[3]{"Id", "Id","Texto" },new string[3]{ "Nombre","nombre","Text"},new string[3]{ "E-Commerce","eCommerce","Checkbox" }}'
                       acciones="true"
                       consultaApi='new TablaGenerica<Departamento>.ConsultarApi {  baseUrl=$"api/departamento?provinciaId={provincia.Id}&", consultaApi=true, paginacion=true, cantidadDeRegistrosAMostrar=10}'
                       editar="true"
                       selectTitem="((Departamento departamento)=>DepartamentoSeleccionado(departamento))"
                       eliminar="true"
                       eliminarFunc="@(async()=>await EliminarDepartamento(departamento))">

            <modalContentEditar>
                <DepartamentoForm departamento="this.departamento" provincia="provincia" accion="Editar" callback="(()=> this.StateHasChanged())"></DepartamentoForm>
            </modalContentEditar>

        </TablaGenerica>
    }

</div>



@code {
    [Parameter]
    public int Id { get; set; } = 0;
    public string formulario { get; set; } = "";
    public Provincia provincia { get; set; }
    public Departamento departamento { get; set; } = new Departamento();
    public TablaGenerica<Departamento> tablaGenerica { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await ListarProvincia();
    }

    public async Task ListarProvincia()
    {
        var responseHttp = await repositorio.Get<Provincia>($"api/provincia/{Id}");
        if (!responseHttp.Error)
        {
            provincia = responseHttp.Response;
        }
        this.StateHasChanged();
    }



    public async Task EliminarProvincia(Provincia provincia)
    {
        await http.DeleteAsync($"api/provincia/{provincia.Id}");
        this.provincia = null;

    }

    public async Task EliminarDepartamento(Departamento departamento)
    {

        await http.DeleteAsync($"api/departamento/{departamento.Id}");
        await ListarProvincia();

    }

    private async Task<IEnumerable<Provincia>> BuscarProvincias(string searchText)
    {
        return await http.GetJsonAsync<List<Provincia>>($"api/provincia/?filtro={searchText}&cantidadDeRegistros=15");
    }

    public Provincia ElementoSeleccionado(Provincia prov)
    {

        provincia = prov;
        this.StateHasChanged();
        return provincia;
    }


    public Departamento DepartamentoSeleccionado(Departamento departamento)
    {
        this.departamento = departamento;
        return departamento;
    }

}

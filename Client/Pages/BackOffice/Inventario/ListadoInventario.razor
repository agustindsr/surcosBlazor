@page "/BackOffice/Inventario/Listado"
@layout BackOfficeLayout
@inject HttpClient http
@attribute [Authorize(Roles = "Admin, Inventario")]
@inject AuthenticationStateProvider authStateProvider
@inject IRepositorio repositorio
@inject NavigationManager uri

    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item" @onclick="@(()=>uri.NavigateTo("/BackOffice/Inventario"))">Invetario</li>
            <li class="breadcrumb-item active" aria-current="page" @onclick="@(()=>uri.NavigateTo("/BackOffice/Inventario/Listado"))">Listado Inventarios</li>
        </ol>
    </nav>
<h3>Listado Inventario</h3>

<div class="mt-2 d-flex row col-md-12 mx-0 p-3 my-3 align-items-center justify-content-between" style="box-shadow:1px 1px 3px #323232">
    <div class="col-md-3">
        <SelectGenerico TList="depositos" Label="Deposito" Context="Deposito" T="Deposito" TItemActual="deposito"
                        SelectItem="@(async(Deposito deposito)=> { this.deposito = deposito; await ListarInventarios(1); })">
            <TTemplate>@Deposito.nombre</TTemplate>
        </SelectGenerico>
    </div>
    <div class="col-md-3">
        <label class="col-md-12 mx-0 px-0"><strong>Nombre Producto</strong></label>
        <input class="form-control" @bind="filtro" />
    </div>
    <div class="col-md-2 mx-0 px-0">
        <div class="btn btn-sm btn-info" @onclick="@(async ()=> await ListarInventarios(1))">
            <span><i class="fas fa-search mr-1"></i>BUSCAR</span>
        </div>
    </div>
</div>

@if (deposito != null)
{
    <table class="table table-sm">
        <thead>
            <tr>
                <td>Producto</td>
                <td>En existencia</td>
                <td>Ver Movimientos</td>
            </tr>


        </thead>
        <tbody>
            @foreach (Inventario inventario in inventarios)
            {
                <tr>
                    <td>

                        @inventario.ProductoPresentacion?.Producto?.nombre, @inventario.ProductoPresentacion?.PresentacionProducto?.nombre
                        @if (inventario.cantidadUnidadesEnExistencia < inventario.ProductoPresentacion.cantidadStockMinima)
                        {
                            <div class="badge badge-danger">[ALERTA] Stock menor a @inventario.ProductoPresentacion.cantidadStockMinima</div>
                        }
                    </td>
                    <td>@inventario.cantidadUnidadesEnExistencia</td>
                    <td>
                        <a class="btn" href="@($"/BackOffice/Inventario/MovimientoInventario/{inventario.Id}")"> <i class="far fa-eye"></i></a>
                    </td>

                </tr>
            }
        </tbody>
    </table>
    <PaginacionComp PaginaActual="paginaActual" PaginaSeleccionada="paginaSeleccionada" PaginasTotales="paginasTotales"></PaginacionComp>

}

@code {
    public List<Deposito> depositos { get; set; }
    public Deposito deposito { get; set; }
    public List<Inventario> inventarios { get; set; } = new List<Inventario>();
    public TablaGenerica<Inventario> tablaGenerica { get; set; }
    public string filtro { get; set; }
    public string userName { get; set; }
    public System.Security.Claims.ClaimsPrincipal User { get; set; }
    private int paginaActual = 1;
    private int paginasTotales;
    private HttpResponseWrapper<List<Inventario>> responseHttp;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authStateProvider.GetAuthenticationStateAsync();
        User = authState.User;
        userName = User.Identity.Name;
        await ListarDepositos();

    }


    public async Task ListarInventarios(int pagina = 1)
    {
        responseHttp = await repositorio.Get<List<Inventario>>($"api/inventario/InventarioPorDeposito?depositoId={deposito.Id}&filtro={filtro}&pagina={pagina}&cantidadDeRegistros=50");
        if (!responseHttp.Error)
        {
            inventarios = responseHttp.Response;

            var conteo = responseHttp.HttpResponseMessage.Headers.GetValues("conteo").FirstOrDefault();

            paginasTotales = int.Parse(responseHttp.HttpResponseMessage.Headers.GetValues("totalPaginas").FirstOrDefault());

        }



    }

    public async Task ListarDepositos()
    {
        depositos = await http.GetJsonAsync<List<Deposito>>($"api/deposito/depositosHabilitados?userName={userName}");
    }


    private async Task paginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        await ListarInventarios(pagina);
    }
}

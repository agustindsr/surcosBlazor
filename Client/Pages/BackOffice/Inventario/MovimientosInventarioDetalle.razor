@page "/BackOffice/Inventario/MovimientoInventario/{inventarioId:int}"
@inject HttpClient http
@layout BackOfficeLayout
@inject IJSRuntime js
@inject IRepositorio repositorio
@attribute [Authorize(Roles = "Admin, Inventario")]
@inject AuthenticationStateProvider authStateProvider
@using Markdig
@inject NavigationManager uri

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item" @onclick="@(()=>uri.NavigateTo("/BackOffice/Inventario"))">Invetario</li>
        <li class="breadcrumb-item" @onclick="@(()=>uri.NavigateTo("/BackOffice/Inventario/Listado"))">Inventarios</li>

        <li class="breadcrumb-item active" aria-current="page" @onclick="@(()=>uri.NavigateTo($"/BackOffice/Inventario/MovimientoInventario/{inventarioId}"))">Movimientos Inventario</li>
    </ol>
</nav>
<h3>Movimientos Inventario</h3>
<div class="col-md-12 row mx-0  p-4 rounded-1" style="box-shadow:2px 2px 4px #262626">
    <div class="col-md-4">
        <SelectGenerico TList="depositos" Label="Deposito" Context="Deposito" T="Deposito" TItemActual="deposito"
                        SelectItem="@((Deposito deposito)=> { this.deposito = deposito; })">
            <TTemplate>@Deposito.nombre</TTemplate>
        </SelectGenerico>
    </div>
    <div class="col-md-4">

        <SelectGenerico TList="productosPresentacion" Label="Producto" Context="Producto" T="ProductoPresentacion" TItemActual="productoPresentacion"
                        SelectItem="@((ProductoPresentacion producto)=> { this.productoPresentacion = producto; })">
            <TTemplate>@Producto.Producto.nombre, @Producto.PresentacionProducto.nombre</TTemplate>
        </SelectGenerico>
    </div>
    @if (deposito != null && productoPresentacion != null)
    {
        <div class="col-md-2 btn btn-sm btn-info text-center align-items-center" style="width:10%" @onclick="@(async()=>await BuscarInventario(productoPresentacion.Id, deposito.Id))">
            <span><i class="fas fa-search mr-1"></i>Buscar</span>
        </div>
    }
</div>
@if (inventario != null)
{
    @if (inventario.Id != 0)
    {
        <div class="d-flex justify-content-between align-items-center my-3 col-md-12 mx-0 px-0">

            <h3 class="my-4">@inventario.ProductoPresentacion.Producto.nombre, @inventario.ProductoPresentacion.PresentacionProducto.nombre - @inventario.Deposito.nombre</h3>
            <div class="btn btn-sm btn-info" @onclick="@(async ()=> await ToggleModal("NuevoMovimiento"))">Nuevo Movimiento</div>
        </div>
        <div class="d-flex justify-content-between">
            <div class="row mx-0 px-0"><strong>Total en existencia: @inventario.cantidadUnidadesEnExistencia Unidades</strong></div>
            <div>
                <input type="checkbox" @bind="mostrarColores" /> Mostrar Colores
            </div>
        </div>

        <table class="table table-sm table-striped">
            <thead>
                <tr class="bg-dark text-white">
                    <th>Fecha</th>
                    <th>Orden Producción</th>

                    <th>Descripción</th>
                    <th>Entra</th>
                    <th>Sale</th>
                    <th>Cantidad Movida</th>
                    <th>En Stock</th>
                </tr>
            </thead>
            <tbody>
                @if (inventario.MovimientosInventario != null)
                {
                    decimal cantidad = inventario.cantidadUnidadesEnExistencia;
                    int anterior = 0;
                    int aux = 0;
                    @foreach (MovimientoInventario movimiento in inventario.MovimientosInventario)
                    {

                        if (aux != 0)
                        {
                            cantidad += anterior;
                        }
                        aux++;
                        anterior = movimiento.entra ? -1 * movimiento.cantidadUnidadesMovida : movimiento.cantidadUnidadesMovida;
                        <tr style="background: @(mostrarColores ? movimiento.entra ? "#9CE36D" : "#E36E54" : "")">
                            <td>@movimiento.fecha</td>
                            <td>
                                @if (movimiento.OrdenProduccion != null)
                                {<a href="@($"/BackOffice/Produccion/DetalleOrdenProduccion/{movimiento.OrdenProduccionId}")">@($"Ord.Producción #{movimiento.OrdenProduccionId}")</a>}
                        </td>
                        <td>
                            @((MarkupString)movimiento.descripcion)
                        </td>
                        <td><i class="@(movimiento.entra  ? " fas fa-check text-success" : "fas fa-times text-danger" )"></i></td>
                        <td><i class="@(movimiento.sale ? " fas fa-check text-success" : "fas fa-times text-danger" )"></i></td>
                        <td class="text-dark">@movimiento.cantidadUnidadesMovida</td>
                        <td class="text-dark">@cantidad</td>

                    </tr>
                }
                }
            </tbody>
        </table>
        <PaginacionComp PaginaActual="paginaActual" PaginaSeleccionada="paginaSeleccionada" PaginasTotales="paginasTotales"></PaginacionComp>

    }
    else
    {
        <div class="d-flex justify-content-between align-items-center my-3 col-md-12 mx-0 px-0">
            <h4>Este inventario no registra movimientos </h4>
            <div class="btn btn-sm btn-info" @onclick="@(async ()=> await ToggleModal("NuevoMovimiento"))">Nuevo Movimiento</div>
        </div>
    }
}

<Modal modalId="NuevoMovimiento" modalTamaño="modal-md" modalTitulo="Nuevo Movimiento de Inventario">
    <MovimientoInventarioForm movimiento="movimientoInventario" callback="@(async(Inventario inventario)=> { await BuscarInventario( inventario.ProductoPresentacionId,inventario.DepositoId); this.StateHasChanged(); })">
    </MovimientoInventarioForm>
</Modal>
@code {
    [Parameter] public int? inventarioId { get; set; }

    public List<Deposito> depositos { get; set; }
    public List<ProductoPresentacion> productosPresentacion { get; set; }
    public Deposito deposito { get; set; }
    public ProductoPresentacion productoPresentacion { get; set; }
    public Inventario inventario { get; set; }
    public MovimientoInventario movimientoInventario { get; set; }
    private int paginaActual = 1;
    private int paginasTotales;
    private HttpResponseWrapper<List<MovimientoInventario>> responseHttp;
    public System.Security.Claims.ClaimsPrincipal User { get; set; }
    public string userName { get; set; }
    public bool mostrarColores { get; set; }

    private async Task paginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        await ListarMovimientosInventario(pagina);
    }
    public async Task ListarMovimientosInventario(int pagina = 1)
    {
        responseHttp = await repositorio.Get<List<MovimientoInventario>>($"api/movimientoInventario?inventarioId={inventario.Id}&pagina={pagina}&cantidadDeRegistros=20");
        if (!responseHttp.Error)
        {
            inventario.MovimientosInventario = responseHttp.Response;

            var conteo = responseHttp.HttpResponseMessage.Headers.GetValues("conteo").FirstOrDefault();

            paginasTotales = int.Parse(responseHttp.HttpResponseMessage.Headers.GetValues("totalPaginas").FirstOrDefault());

        }



    }
    protected override async Task OnParametersSetAsync()
    {
        var authState = await authStateProvider.GetAuthenticationStateAsync();
        User = authState.User;
        userName = User.Identity.Name;

        await BuscarInventario();
        await ListarDepositos();
        await ListarProductosPresentacion();
    }
    public async Task ListarDepositos()
    {
        depositos = await http.GetJsonAsync<List<Deposito>>($"api/deposito/depositosHabilitados?userName={userName}");
    }
    public async Task ListarProductosPresentacion()
    {
        productosPresentacion = await http.GetJsonAsync<List<ProductoPresentacion>>("api/productopresentacion/productoParaInventario");
    }

    public async Task BuscarInventario()
    {
        if (inventarioId != 0 && inventarioId != null)
        {

            inventario = await http.GetJsonAsync<Inventario>($"api/inventario/{inventarioId}");
            paginaActual = 1;
            await ListarMovimientosInventario(paginaActual);
            deposito = inventario.Deposito;
            productoPresentacion = inventario.ProductoPresentacion;
            movimientoInventario = new MovimientoInventario { Inventario = inventario, InventarioId = inventario.Id };
        }
    }
    public async Task BuscarInventario(int productoId, int depositoId)
    {
        if (productoId != 0 && depositoId != 0)
        {

            inventario = await http.GetJsonAsync<Inventario>($"api/inventario/DetalleInventario?productoId={productoId}&depositoId={depositoId}");
            paginaActual = 1;
            if (inventario.Id != 0)
            {
                await ListarMovimientosInventario(paginaActual);
            }
            movimientoInventario = new MovimientoInventario
            {
                Inventario = new Inventario
                {
                    ProductoPresentacion = productoPresentacion,
                    Deposito = deposito,
                    ProductoPresentacionId = productoPresentacion.Id,
                    DepositoId = deposito.Id,
                    Id = inventario.Id
                }
                                                                                        ,
                InventarioId = inventario.Id
            };
        }
    }

    public async Task ToggleModal(string id)
    {

        await js.InvokeAsync<object>("ModalToggle", id);
    }
}

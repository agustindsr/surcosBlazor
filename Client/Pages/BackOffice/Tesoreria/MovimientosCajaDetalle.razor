@page "/BackOffice/Tesoreria/MovimientosCaja/{cajaId:int}"
@inject HttpClient http
@layout BackOfficeLayout
@inject IJSRuntime js
@inject IRepositorio repositorio
@attribute [Authorize(Roles = "Admin, Logistica, Administrativo")]
@inject AuthenticationStateProvider authStateProvider
@attribute [Authorize(Roles = "Admin, Tesoreria")]
@inject NavigationManager uri

    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item" @onclick="@(()=>uri.NavigateTo("/BackOffice/Tesoreria"))">Tesoreria</li>
            <li class="breadcrumb-item" @onclick="@(()=>uri.NavigateTo("/BackOffice/Tesoreria/ListadoCaja"))">Cajas</li>

            <li class="breadcrumb-item active" aria-current="page" @onclick="@(()=>uri.NavigateTo($"/BackOffice/Tesoreria/MovimientosCaja/{cajaId}"))">Movimientos de Caja</li>
        </ol>
    </nav>


<h3>Movimientos Caja</h3>

@if (caja != null)
{
    @if (caja.Id != 0)
    {
        <div class="d-flex justify-content-between align-items-center my-3 col-md-12 mx-0 px-0">

            <h3 class="my-4">@caja.nombre</h3>
            <div class="btn btn-sm btn-info" @onclick="@(async ()=> await ToggleModal("NuevoMovimiento"))">Nuevo Movimiento</div>
        </div>
        <div class="row mx-0 px-0"><strong>Saldo: $ @caja.saldo</strong></div>

        <table class="table table-sm table-striped">
            <thead>
                <tr class="bg-dark text-white">
                    <th>Fecha</th>
                    <th>Comprobante</th>
                    <th>Tipo Movimiento</th>

                    <th>Descripción</th>
                    <th>Entra</th>
                    <th>Sale</th>
                    <th>Total</th>
                    <th>Saldo</th>

                </tr>
            </thead>
            <tbody>
                @if (caja.MovimientosCaja != null)
                {
                    decimal saldo = caja.saldo;
                    decimal anterior = 0.00M;
                    int aux = 0;
                    @foreach (MovimientoCaja movimiento in caja.MovimientosCaja)
                    {
                        if (aux != 0)
                        {
                            saldo += anterior;
                        }
                        aux++;
                        anterior = movimiento.entra ? -1 * movimiento.totalMovimiento : movimiento.totalMovimiento;
                        <tr>
                            <td>@movimiento.fecha</td>
                            <td>
                                @if (movimiento.ReciboCobranzas != null)
                                {
                                    <a href="@($"/BackOffice/Tesoreria/DetalleReciboCobranza/{movimiento.ReciboCobranzasId}")"> REC #@movimiento.ReciboCobranzas.Id</a>
                                }
                                else if (movimiento.OrdenPago != null)
                                {
                                    <a href="@($"/BackOffice/Tesoreria/DetalleOrdenPago/{movimiento.OrdenPagoId}")"> OP #@movimiento.OrdenPagoId</a>


                                }
                            </td>
                            <td>@movimiento.TipoMovimientoCaja?.nombre</td>
                            <td>@movimiento.descripcion</td>
                            <td><i class="@(movimiento.entra ? " fas fa-check text-success" : "fas fa-times text-danger" )"></i></td>
                            <td><i class="@(movimiento.sale ? " fas fa-check text-success" : "fas fa-times text-danger" )"></i></td>
                            <td class="text-dark">$ @movimiento.totalMovimiento</td>
                            <td class="text-dark">$ @saldo</td>

                        </tr>
                    }
                }
            </tbody>
        </table>
        <PaginacionComp PaginaActual="paginaActual" PaginaSeleccionada="paginaSeleccionada" PaginasTotales="paginasTotales"></PaginacionComp>

    }
    else
    {
        <div class="d-flex justify-content-between align-items-center my-3 col-md-12 mx-0 px-0">
            <h4>Este caja no registra movimientos </h4>
            <div class="btn btn-sm btn-info" @onclick="@(async ()=> await ToggleModal("NuevoMovimiento"))">Nuevo Movimiento</div>
        </div>
    }
}

<Modal modalId="NuevoMovimiento" modalTamaño="modal-md" modalTitulo="Nuevo Movimiento de Caja">
    <MovimientoCajaForm movimiento="movimientoCaja" callback="@(async(Caja caja)=> { await BuscarCaja(); this.StateHasChanged(); })">
    </MovimientoCajaForm>
</Modal>
@code {
    [Parameter] public int? cajaId { get; set; }

    public List<Deposito> depositos { get; set; }
    public List<ProductoPresentacion> productosPresentacion { get; set; }
    public Deposito deposito { get; set; }
    public ProductoPresentacion productoPresentacion { get; set; }
    public Caja caja { get; set; }
    public MovimientoCaja movimientoCaja { get; set; }
    private int paginaActual = 1;
    private int paginasTotales;
    private HttpResponseWrapper<List<MovimientoCaja>> responseHttp;
    public System.Security.Claims.ClaimsPrincipal User { get; set; }
    public string userName { get; set; }

    private async Task paginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        await ListarMovimientosCaja(pagina);
    }
    public async Task ListarMovimientosCaja(int pagina = 1)
    {
        responseHttp = await repositorio.Get<List<MovimientoCaja>>($"api/movimientoCaja?cajaId={caja.Id}&pagina={pagina}&cantidadDeRegistros=30");
        if (!responseHttp.Error)
        {
            caja.MovimientosCaja = responseHttp.Response;

            var conteo = responseHttp.HttpResponseMessage.Headers.GetValues("conteo").FirstOrDefault();

            paginasTotales = int.Parse(responseHttp.HttpResponseMessage.Headers.GetValues("totalPaginas").FirstOrDefault());

        }



    }

    protected override async Task OnParametersSetAsync()
    {
        var authState = await authStateProvider.GetAuthenticationStateAsync();
        User = authState.User;
        userName = User.Identity.Name;

        await BuscarCaja();

    }


    public async Task BuscarCaja()
    {
        if (cajaId != 0 && cajaId != null)
        {

            caja = await http.GetJsonAsync<Caja>($"api/caja/{cajaId}");
            paginaActual = 1;
            await ListarMovimientosCaja(paginaActual);
            movimientoCaja = new MovimientoCaja { Caja = caja, CajaId = caja.Id };
        }
    }


    public async Task ToggleModal(string id)
    {

        await js.InvokeAsync<object>("ModalToggle", id);
    }
}

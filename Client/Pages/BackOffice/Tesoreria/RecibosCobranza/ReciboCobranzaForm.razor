@page "/BackOffice/Tesoreria/ReciboCobranza"
@inject HttpClient http
@layout BackOfficeLayout
@inject AuthenticationStateProvider authStateProvider
@inject IRepositorio repositorio
@inject IToastService toastService
@inject NavigationManager uri
@attribute [Authorize(Roles = "Admin, Tesoreria")]

@if (cargando)
{
    <Loading></Loading>
}
<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item" @onclick="@(() => uri.NavigateTo("BackOffice/Tesoreria"))">Tesoreria</li>
        <li class="breadcrumb-item" @onclick="@(() => uri.NavigateTo("BackOffice/Tesoreria/ListadoRecibosCobranza"))">Recibos de Cobranza</li>
        <li class="breadcrumb-item active" aria-current="page" @onclick="@(() => uri.NavigateTo($"BackOffice/Tesoreria/ReciboCobranza"))">Nuevo Recibo de Cobranza</li>
    </ol>
</nav>
<h3>Nuevo Recibo Cobranza</h3>
@if (recibo != null)
{

    <EditForm Model="recibo" OnValidSubmit="@(async()=> { cargando = true; await CrearRecibo(); })">
        <Blazored.FluentValidation.FluentValidationValidator />
        <ValidationSummary />
        <div class="p-4" style="box-shadow:1px 1px 3px #323232">

            <div class="col-md-12 row mx-0">
                <div class="form-group col-md-6">
                    <label>Cliente</label>
                    @if (recibo.ClienteId == 0)
                    {


                        <InputBuscaTypeahead ElementoSeleccionado="((Cliente cliente) => { clienteSeleccionado(cliente); return cliente; })" Context="cliente"
                                             SearchMethod="(async (string name) => await buscarClientes(name))">
                            <MyResultTemplate>
                                <div>#@cliente.Id @cliente.nombre, @cliente.apellido</div>
                            </MyResultTemplate>
                        </InputBuscaTypeahead>
                    }
                    else
                    {
                        <div><h2><strong class="badge">#@recibo.ClienteId @recibo.Cliente.nombre, @recibo.Cliente.apellido</strong><i class="fas fa-times text-danger" style="cursor:pointer" @onclick="(() => { recibo.Cliente = null; recibo.ClienteId = 0; recibo.Imputaciones = new List<ImputacionComprobantesVenta>(); facturasPendientes = new List<Factura>(); this.StateHasChanged(); })"></i></h2></div>
                    }
                </div>
                <div class="col-md-6">
                    <label>Fecha</label>
                    <input class="form-control" type="date" value="@recibo.fecha.ToString("yyyy-MM-dd")" @onchange="@((ChangeEventArgs e) => { recibo.fecha = Convert.ToDateTime(e.Value); })" />
                </div>
            </div>
        </div>
        <div class="my-2">
            <ul class="nav nav-pills mb-3" id="pills-tab" role="tablist">
                <li class="nav-item">
                    <a class="nav-link active" id="pills-imputaciones-tab" data-toggle="pill" href="#pills-imputaciones" role="tab" aria-controls="pills-imputaciones" aria-selected="true">Imputaciones</a>
                </li>
                <li class="nav-item mx-3">
                    <a class="nav-link" id="pills-tesoreria-tab" data-toggle="pill" href="#pills-tesoreria" role="tab" aria-controls="pills-tesoreria" aria-selected="false">Movimientos de Tesorería</a>
                </li>
            </ul>

            <div class="tab-content bg-light rounded" id="pills-tabContent">
                <div class="tab-pane fade show active" id="pills-imputaciones" role="tabpanel" aria-labelledby="pills-imputaciones-tab">
                    <div class="" style="box-shadow:1px 1px 3px #323232">
                        <table class="table table-sm table-striped">
                            <thead>
                                <tr>
                                    <th>Seleccionada</th>
                                    <th>Número de comprobante</th>
                                    <th>Estado</th>
                                    <th>Total Comprobante</th>
                                    <th>Total Pendiente</th>
                                    <th>Total a Imputar</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (Factura factura in facturasPendientes)
                                {
                                    <tr>
                                        <td>
                                            @if (recibo.Imputaciones.Where(x => x.FacturaVentasId == factura.Id).Count() > 0)
                                            {
                                                <input type="checkbox" checked @onclick="@(() => { recibo.Imputaciones.Remove(recibo.Imputaciones.Single(x => x.FacturaVentasId == factura.Id)); this.StateHasChanged(); })" />
                                            }
                                            else
                                            {
                                                <input type="checkbox" @onclick="@(() => { recibo.Imputaciones.Add(new ImputacionComprobantesVenta
                                                                               { FacturaVentasId = factura.Id, FacturaVenta = factura,totalImputado = (factura.totalComprobante - factura.totalCancelado),  });
                                                                                   this.StateHasChanged(); })" />
                                            }
                                        </td>
                                        <td>@factura.codigo</td>
                                        <td>@factura.EstadoFactura.nombre</td>
                                        <td>$@factura.totalComprobante</td>
                                        <td>$@(factura.totalComprobante - factura.totalCancelado)</td>
                                        <td>
                                            @if (recibo.Imputaciones.Where(x => x.FacturaVentasId == factura.Id).Count() > 0)
                                            {
                                                <input type="number" step="0.01" max="@(factura.totalComprobante - factura.totalCancelado)" class="form-control" @bind="recibo.Imputaciones.Single(x => x.FacturaVentasId == factura.Id).totalImputado" />
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>



                    </div>
                </div>
                <div class="tab-pane fade" id="pills-tesoreria" role="tabpanel" aria-labelledby="pills-tesoreria-tab">

                    <div class="p-4" style="box-shadow:1px 1px 3px #323232">
                        <div class="d-flex justify-content-end"><div class="btn btn-info" @onclick="@(() => recibo.movimientosCaja.Add(new MovimientoCaja {  entra = true, }))">Agregar</div></div>
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>Caja</th>
                                    <th>Importe</th>
                                    <th></th>
                                </tr>
                            </thead>
                            @foreach (MovimientoCaja movimientoCaja in recibo.movimientosCaja)
                            {
                                <tr>
                                    <td>
                                        <SelectGenerico TList="cajas" Context="caja" TItemActual="movimientoCaja.Caja"
                                                        SelectItem="@((Caja caja) => { movimientoCaja.Caja = caja; movimientoCaja.CajaId = caja.Id; })">

                                            <TTemplate>@caja.nombre</TTemplate>
                                        </SelectGenerico>
                                        <ValidationMessage For="@(() => recibo.Imputaciones)" />
                                    </td>
                                    <td>
                                        <input type="number" step="0.01" max="" class="form-control" @bind="movimientoCaja.totalMovimiento" @onblur="@(()=>recibo.totalComprobante = recibo.movimientosCaja.Sum(x => x.totalMovimiento))" />
                                    </td>

                                    <td><i class="far fa-trash-alt text-danger" style="cursor:pointer" @onclick="@(() => { recibo.movimientosCaja.Remove(movimientoCaja); })"></i></td>

                                </tr>
                            }
                        </table>
                    </div>
                </div>
            </div>


        </div>

        <div class="p-4" style="box-shadow:1px 1px 3px #323232">
            @if (true)
            {
                decimal diferencia = recibo.movimientosCaja.Sum(x => x.totalMovimiento) - recibo.Imputaciones.Sum(x => x.totalImputado);
                <div class="col-md-12"><strong>Total imputado:</strong>$ @recibo.Imputaciones.Sum(x => x.totalImputado) </div>
                <div class="col-md-12"><strong>Total pagado:</strong>$ @recibo.movimientosCaja.Sum(x => x.totalMovimiento) </div>
                <div class="col-md-12 @(diferencia > 0 ? "text-success" : "")"><strong>A cuenta: </strong>$  @(diferencia > 0 ? diferencia : 0.00M)</div>
                <div class="col-md-12 @(diferencia < 0 ? "text-danger" : "")"><strong>Diferencia: </strong>$  @(diferencia < 0 ? diferencia : 0.00M)</div>
            }
        </div>
        <button type="submit" class="btn btn-block btn-info my-3">Crear</button>
    </EditForm>
}


@code {
    public ReciboCobranzas recibo { get; set; }
    public List<Factura> facturasPendientes { get; set; } = new List<Factura>();
    public System.Security.Claims.ClaimsPrincipal User { get; set; }
    public string userName { get; set; }
    public List<Caja> cajas { get; set; }
    public bool cargando { get; set; }
    protected override async Task OnInitializedAsync()
    {

        recibo = new ReciboCobranzas { movimientosCaja = new List<MovimientoCaja>(), Imputaciones = new List<ImputacionComprobantesVenta>() };

        var authState = await authStateProvider.GetAuthenticationStateAsync();
        User = authState.User;
        userName = User.Identity.Name;
        await ListarCajas();
    }


    public async Task ListarCajas()
    {
        cajas = await http.GetJsonAsync<List<Caja>>($"api/caja/cajasHabilitadas?userName={userName}");

    }

    public async Task<List<Cliente>> buscarClientes(string name)
    {
        return await http.GetJsonAsync<List<Cliente>>($"api/cliente?cantidadDeRegistros=25&filtro={name}");
    }

    public async Task clienteSeleccionado(Cliente cliente)
    {
        recibo.Cliente = cliente;
        recibo.ClienteId = cliente.Id;
        await BuscarComprobantesPendientes();
        this.StateHasChanged();
    }
    public async Task BuscarComprobantesPendientes()
    {

        facturasPendientes = await http.GetJsonAsync<List<Factura>>($"api/factura/facturasPorClienteParaRecibo?clienteId={recibo.ClienteId}");
    }


    public async Task CrearRecibo()
    {
        recibo.Cliente.Domicilio = null;
        if (recibo.Imputaciones.Count > 0)
        {
            recibo.EstadoReciboId = 1;
        }
        else
        {
            recibo.EstadoReciboId = 2;

        }
        recibo.totalImputado = recibo.Imputaciones.Sum(x => x.totalImputado);
        var respuesta = await repositorio.Post("api/ReciboCobranza", recibo);
        cargando = false;

        if (!respuesta.Error)
        {
            uri.NavigateTo($"/BackOffice/Tesoreria/ListadoRecibosCobranza");
            toastService.ShowSuccess("Se creó correctamente el recibo");
        }
        else
        {
            toastService.ShowError(respuesta.HttpResponseMessage.Content.ReadAsStringAsync().Result);
        }
    }
}



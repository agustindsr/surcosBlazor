@inject HttpClient http
@inject IJSRuntime js
@inject IToastService toastService
@attribute [Authorize(Roles = "Admin, Tesoreria")]

@if (cargando)
{
    <Loading></Loading>
}
@if (caja != null)
{

    <EditForm Model="@caja" OnValidSubmit="@(async()=>{cargando = true; await Confirmar();})">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label>Nombre</label>
            <input class="form-control" @bind="@caja.nombre" />
            <ValidationMessage For="(()=>caja.nombre)"></ValidationMessage>
        </div>

        <button class="btn-outline-olive btn-block" type="submit">@accion</button>
    </EditForm>
}
@code {
    [Parameter]
    public Caja caja { get; set; }
    [Parameter]
    public string accion { get; set; }
    [Parameter]
    public EventCallback callback { get; set; }
    public bool cargando { get; set; } = false;
    public async Task Confirmar()
    {
        try
        {
            if (accion == "Crear")
            {
                await http.PostJsonAsync("api/caja", caja);
                cargando = false;

                toastService.ShowSuccess($"Se creó correctamente la Categoria Cliente {caja.nombre}");

            }
            if (accion == "Editar")
            {
                await http.PutJsonAsync($"api/caja/{caja.Id}", caja);
                cargando = false;

                toastService.ShowSuccess($"Se editó correctamente la Categoria Cliente {caja.nombre}");

            }
        }
        catch (Exception ex)
        {
            cargando = false;

            toastService.ShowError($"Ocurrió un error:  {ex.Message}");
        }


        await CloseAllModals();

        await callback.InvokeAsync(new Object());

    }
    public async Task CloseAllModals()
    {

        await js.InvokeAsync<object>("CloseAllModals");
    }
}
